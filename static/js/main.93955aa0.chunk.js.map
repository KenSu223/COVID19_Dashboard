{"version":3,"sources":["components/maps.js","App.js","serviceWorker.js","index.js"],"names":["CBar","props","cur","data","filter","item","statename","ResponsiveContainer","width","height","BarChart","margin","top","right","left","bottom","CartesianGrid","strokeDasharray","XAxis","dataKey","tick","YAxis","Tooltip","Legend","disease","Bar","fill","Mapo","useState","setMaximum","svgRef","useRef","colourScale","setColourScale","setColorfunction","clickedfips","setClickedfips","clicked","setClicked","statefips","setStatefips","setStateName","clickedState","setStateClickedState","useEffect","d3","csv","d","ChosenDisease","colorScale","scaleQuantile","domain","range","select","current","scales","_","each","CountyList","list","map","CountyListItem","id","class","onClick","setSelectedOption","value","COUNTY_NAME","label","style","backgroundColor","filteredCountyList","STATE_NAME","filteredCountyOptions","selectedOption","concat","CountyDropdown","options","placeholder","clearable","onChange","CountyPercentageCircle","ChosenCounty","percent","ChosenCountyName","length","Array","isArray","textSize","styles","buildStyles","pathColor","fontSize","marginTop","lineHeight","justifyContent","fontsSize","toFixed","Grid","columns","divided","Row","Column","display","scale","labels","i","LegendItem","r","legendGlyphSize","cx","cy","LegendLabel","align","text","projection","geography","geographies","geo","fip","substring","find","s","onMouseEnter","onMouseLeave","default","outline","hover","pressed","properties","name","rsmKey","size","marginBottom","Table","celled","fixed","Header","textalign","colSpan","textAlign","fontWeight","color","HeaderCell","statedic","nationdic","App","setChosenDisease","disease_prevalence","DropdownButton","statesData","setStateData","a","fetch","datageo","res","json","Boolean","window","location","hostname","match","styleLink","document","createElement","rel","href","head","appendChild","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"o00+EA8CA,SAASA,EAAKC,GACZ,IAAMC,EAAMD,EAAME,KAAKC,QAAO,SAAUC,GACtC,OAAOA,EAAI,YAAkBJ,EAAMK,aAGrC,OACE,cAACC,EAAA,EAAD,CAAqBC,MAAM,OAAOC,OAAQ,IAA1C,SACE,eAACC,EAAA,EAAD,CACEP,KAAMD,EACNS,OAAQ,CACNC,IAAK,EACLC,MAAO,GACPC,KAAM,EACNC,OAAQ,GANZ,UASE,cAACC,EAAA,EAAD,CAAeC,gBAAgB,QAC/B,cAACC,EAAA,EAAD,CAAOC,QAAQ,cAAcC,MAAM,IACnC,cAACC,EAAA,EAAD,IACA,cAACC,EAAA,EAAD,IACA,cAACC,EAAA,EAAD,IAC0B,kBAAlBtB,EAAMuB,QACZ,cAACC,EAAA,EAAD,CAAKN,QAASlB,EAAMuB,QAAQ,GAAIE,KAAK,YAErC,cAACD,EAAA,EAAD,CAAKN,QAASlB,EAAMuB,QAASE,KAAK,iBAuhB7BC,MA9gBf,SAAc1B,GACZ,MAAmC2B,mBAAS3B,EAAME,MAAlD,mBACA,GADA,UAC8ByB,mBAAS,IAAvC,mBAAgBC,GAAhB,WACMC,EAASC,mBACf,EAAsCH,qBAAtC,mBAAOI,EAAP,KAAoBC,EAApB,KAEA,GADgBF,mBAC0BH,sBAA1C,mBAAsBM,GAAtB,WACA,EAAsCN,qBAAtC,mBAAOO,EAAP,KAAoBC,EAApB,KACA,EAA8BR,oBAAS,GAAvC,mBAAOS,EAAP,KAAgBC,EAAhB,KAEA,EAAkCV,mBAAS,WAA3C,mBAAOW,EAAP,KAAkBC,EAAlB,KACA,EAAkCZ,mBAAS,qBAA3C,mBAAOtB,EAAP,KAAkBmC,EAAlB,KACA,EAA6Cb,mBAAS,qBAAtD,mBAAOc,EAAP,KAAqBC,EAArB,KACAC,qBAAU,WACRf,EACEgB,IAAO5C,EAAM6C,KAAK,SAAUC,GAC1B,OAAOA,EAAE9C,EAAM+C,mBAGnB,IAAIC,EAAaC,cACdC,OAAO,CACN,EACAN,IAAO5C,EAAM6C,KAAK,SAAUC,GAE1B,OAAOA,EAAE9C,EAAM+C,oBAGlBI,MAAM,CACL,UACA,UACA,UACA,UACA,UACA,UACA,UACA,YAEJlB,EAAiBe,GAELI,YAAOvB,EAAOwB,SAA1B,IACIC,EAAS,GACbC,IAAEC,KAAKxD,EAAM6C,KAAK,SAACC,GACjBQ,EAAOR,EAAC,aAAmBE,EAAWF,EAAE9C,EAAM+C,mBAGhDf,EAAesB,KAEd,CAACtD,EAAM+C,gBAEV,IAAMU,EAAa,SAAC,GAAc,IAAZC,EAAW,EAAXA,KACpB,OACE,gCACE,qDAAwBjB,KACxB,6BACGiB,EAAKC,KAAI,SAACvD,GAAD,OACR,cAACwD,EAAD,CAA8BxD,KAAMA,GAAfA,EAAKyD,aAO9BD,EAAiB,SAAC,GAAc,IAAZxD,EAAW,EAAXA,KAMxB,OACE,8BACE,oBACE0D,MAAM,SACNC,QAAS,kBACPC,GAAkB,CAChBC,MAAO7D,EAAK8D,YACZC,MAAO/D,EAAK8D,eALlB,SASE,sBAAKJ,MAAM,cAAX,UACE,qBACEA,MAAM,YACNM,MAAO,CAAEC,gBAAiBtC,EAAY3B,EAAK8D,gBAE7C,qBAAKJ,MAAM,aAAX,SAAyB1D,EAAK8D,sBAOlCI,GAAqBtE,EAAM6C,IAAI1C,QAAO,SAAUC,GACpD,OAAOA,EAAKmE,aAAe9B,KAGvB+B,GAAwBF,GAAmBX,KAAI,SAACvD,GACpD,MAAO,CAAE6D,MAAO7D,EAAK8D,YAAaC,MAAO/D,EAAK8D,gBAIhD,GAA4CvC,mBAAS,MAArD,qBAAO8C,GAAP,MAAuBT,GAAvB,MAEArB,qBAAU,WAER,GAAI8B,GACuBA,GAAeR,MAAMS,OAAO,iBAGtD,CAACD,KAEJ,IAAME,GAAiB,WACrB,OACE,8BACE,cAAC,IAAD,CACEC,QAASJ,GACTP,MAAOQ,GACPI,YAAa,kBACbC,WAAW,EAGXC,SAAUf,QASZgB,GAAyB,SAAC9E,GAE9B,IAAI+E,EAAeX,GAAmBnE,QAAO,SAAUC,GACrD,GAAIqE,GACF,OAAOrE,EAAK8D,cAAgBO,GAAeR,SAI3CiB,EAAU,GACVC,EAAmB,IAQvB,OAP2B,GAAvBF,EAAaG,SACfD,EAAmBF,EAAa,GAAb,YAEdC,EADLG,MAAMC,QAAQtF,EAAM+C,eACLkC,EAAa,GAAGjF,EAAM+C,cAAc,IACpCkC,EAAa,GAAGjF,EAAM+C,gBAIrC,gCACE,8BACE,oBAAIqB,MAAO,CAAEmB,SAAU,YAEzB,cAAC,IAAD,CACEC,OAAQC,YAAY,CAAEF,SAAU,OAAQG,UAAW,YACnDzB,MAAOiB,EAFT,SAKE,qBACEd,MAAO,CACLuB,SAAU,GACVpF,MAAO,MACPqF,WAAY,EACZC,WAAY,IACZC,eAAgB,UANpB,SASE,mCACG9F,EAAM+C,cADT,OAC4BoC,EAC1B,uBACA,yBAAQf,MAAO,CAAE2B,UAAW,IAA5B,UAAmCb,EAAnC,kBASRlC,GAAaC,cACdC,OAAO,CACN,EACAN,IAAO5C,EAAM6C,KAAK,SAAUC,GAC1B,OAAOA,EAAE9C,EAAM+C,eAAeiD,QAAQ,QAGzC7C,MAAM,CACL,UACA,UACA,UACA,UACA,UACA,UACA,UACA,YAEJ,OAAIpB,EAGA,8BACE,eAACkE,EAAA,EAAD,CAAMC,QAAS,EAAGC,SAAO,EAAzB,UACE,eAACF,EAAA,EAAKG,IAAN,WACE,cAACH,EAAA,EAAKI,OAAN,CAAa9F,MAAO,EAApB,SACE,sBAAKuD,MAAM,aAAX,UACG,IACD,cAACL,EAAD,CAAYC,KAAMY,GAAoBT,GAAG,gBAK7C,eAACoC,EAAA,EAAKI,OAAN,CAAa9F,MAAO,GAApB,UACE,+BACGP,EAAM+C,cADT,OAC4BN,KAE5B,8BACE,sBACE2B,MAAO,CACL7D,MAAO,OACP+F,QAAS,OACTR,eAAgB,SAChBH,SAAU,QALd,UAQG,IACD,cAAC,IAAD,CAAgBY,MAAOvD,GAAvB,SACG,SAACwD,GAAD,OACCA,EAAO7C,KAAI,SAACQ,EAAOsC,GAAR,OACT,eAACC,EAAA,EAAD,WACE,qBACEnG,MAnDF,GAoDEC,OApDF,GAqDE4D,MAAO,CAAE1D,OAAQ,SAHnB,SAKE,wBACEe,KAAM0C,EAAMF,MACZ0C,EAAGC,IACHC,GAAID,IACJE,GAAIF,QAGR,cAACG,EAAA,EAAD,CAAaC,MAAM,OAAOtG,OAAO,QAAjC,SACGyD,EAAM8C,SAdX,iBAA2BR,eAsBrC,gCACE,cAAC,gBAAD,CACE,cACA,WAAS,SACTS,WAAW,eAHb,SAKE,cAAC,gBAAD,UACE,cAAC,cAAD,CAAaC,UA/PlB,4DA+PK,SACG,qBAAGC,YACUzD,KAAI,SAAC0D,GAIf,OACE,cAAC,YAAD,CAEEF,UAAWE,EACXtD,QAAS,WACP,IAAMuD,EAAMD,EAAIxD,GAAG0D,UAAU,EAAG,GAC1BtH,EAAMD,EAAM6C,IAAI2E,MACpB,SAACC,GAAD,OAAOA,EAAC,WAAiB,KAAOH,KAElC5E,EAAqBzC,EAAG,YACxBkC,EAAemF,GACfjF,GAAW,IAEbqF,aAAc,WACZ,IAAMJ,EAAMD,EAAIxD,GAAG0D,UAAU,EAAG,GAC1BtH,EAAMD,EAAM6C,IAAI2E,MACpB,SAACC,GAAD,OAAOA,EAAC,WAAiB,KAAOH,KAElC/E,EAAa+E,GAEb9E,EAAavC,EAAG,aAElB0H,aAAc,WACZpF,EAAa,WACbC,EAAa,sBAEf4B,MAAO,CACLwD,QAAS,CACPC,QAAS,QAEXC,MAAO,CACLD,QAAS,QAEXE,QAAS,CACPF,QAAS,SAGbpG,KACE4F,EAAIxD,GAAG0D,UAAU,EAAG,KAAOjF,EACvB,SACAP,EAAYsF,EAAIW,WAAWC,MAC3BlG,EAAYsF,EAAIW,WAAWC,MAC3B,QAxCDZ,EAAIa,kBAiDvB,eAAC,IAAD,CAAcrE,GAAG,SAAjB,UACE,uBAAMsE,KAAK,OAAX,UACE,4BAAI9H,IAAe,OAErB,uBACA,6EAIN,eAAC4F,EAAA,EAAKI,OAAN,CAAa9F,MAAO,EAApB,UACE,sBAAK6D,MAAO,CAAE7D,MAAO,MAAO6H,aAAc,OAA1C,UACE,2EACA,qBAAKhE,MAAO,CAAEgE,aAAc,MAA5B,SACE,cAACzD,GAAD,MAEF,cAACK,GAAD,CAAwB9E,KAAMF,EAAM6C,SAEtC,cAACwF,EAAA,EAAD,CAAOC,QAAM,EAACC,OAAK,EAACnE,MAAO,CAAE7D,MAAO,OAApC,SACE,eAAC8H,EAAA,EAAMG,OAAP,WACE,qBACEC,UAAU,SACVC,QAAQ,IACRtE,MAAO,CAAEC,gBAAiB,WAH5B,UAKE,qBACEqE,QAAQ,IACRtE,MAAO,CACLuB,SAAU,OACVgD,UAAW,SACXC,WAAY,IACZC,MAAO,SANX,iCASuB,OAEvB,qBACEH,QAAQ,IACRtE,MAAO,CACLuB,SAAU,OACVgD,UAAW,SACXC,WAAY,IACZC,MAAO,SANX,UASG,IACAzG,EAAUK,EAAe,MAE5B,qBACEiG,QAAQ,IACRtE,MAAO,CACLuB,SAAU,OACVgD,UAAW,SACXC,WAAY,IACZC,MAAO,SANX,UASG,IATH,aAcF,eAACR,EAAA,EAAMjC,IAAP,CAAWuC,UAAU,SAArB,UACE,eAACN,EAAA,EAAMS,WAAP,CACE1E,MAAO,CAAEuB,SAAU,OAAQiD,WAAY,KADzC,UAGG,IACA,UAAW,OAEd,eAACP,EAAA,EAAMS,WAAP,CACE1E,MAAO,CAAEuB,SAAU,OAAQiD,WAAY,KADzC,UAGG,IACAxG,EACC2G,EAAS7G,GAAT,eAEA,wBACC,OAEL,eAACmG,EAAA,EAAMS,WAAP,CACE1E,MAAO,CAAEuB,SAAU,OAAQiD,WAAY,KADzC,UAGG,IACAI,EAAU,GAAV,eAAgC,UAGrC,eAACX,EAAA,EAAMjC,IAAP,CAAWuC,UAAU,SAArB,UACE,eAACN,EAAA,EAAMS,WAAP,CACE1E,MAAO,CAAEuB,SAAU,OAAQiD,WAAY,KADzC,UAGG,IACA,MAAO,OAEV,eAACP,EAAA,EAAMS,WAAP,CACE1E,MAAO,CAAEuB,SAAU,OAAQiD,WAAY,KADzC,UAGG,IACAxG,EACC2G,EAAS7G,GAAT,WAEA,wBACC,OAEL,eAACmG,EAAA,EAAMS,WAAP,CACE1E,MAAO,CAAEuB,SAAU,OAAQiD,WAAY,KADzC,UAGG,IACAI,EAAU,GAAV,WAA4B,UAGjC,eAACX,EAAA,EAAMjC,IAAP,CAAWuC,UAAU,SAArB,UACE,eAACN,EAAA,EAAMS,WAAP,CACE1E,MAAO,CAAEuB,SAAU,OAAQiD,WAAY,KADzC,UAGG,IACA,OAAQ,OAEX,eAACP,EAAA,EAAMS,WAAP,CACE1E,MAAO,CAAEuB,SAAU,OAAQiD,WAAY,KADzC,UAGG,IACAxG,EACC2G,EAAS7G,GAAT,YAEA,wBACC,OAEL,eAACmG,EAAA,EAAMS,WAAP,CACE1E,MAAO,CAAEuB,SAAU,OAAQiD,WAAY,KADzC,UAGG,IACAI,EAAU,GAAV,YAA6B,UAGlC,eAACX,EAAA,EAAMjC,IAAP,CAAWuC,UAAU,SAArB,UACE,eAACN,EAAA,EAAMS,WAAP,CACE1E,MAAO,CAAEuB,SAAU,OAAQiD,WAAY,KADzC,UAGG,IACA,iBAAkB,OAErB,eAACP,EAAA,EAAMS,WAAP,CACE1E,MAAO,CAAEuB,SAAU,OAAQiD,WAAY,KADzC,UAGG,IACAxG,EACC2G,EAAS7G,GAAa,wBAEtB,wBACC,OAEL,eAACmG,EAAA,EAAMS,WAAP,CACE1E,MAAO,CAAEuB,SAAU,OAAQiD,WAAY,KADzC,UAGG,IACAI,EAAU,GAAG,wBAAyB,UAG3C,eAACX,EAAA,EAAMjC,IAAP,CAAWuC,UAAU,SAArB,UACE,eAACN,EAAA,EAAMS,WAAP,CACE1E,MAAO,CAAEuB,SAAU,OAAQiD,WAAY,KADzC,UAGG,IACA,YAAa,OAEhB,eAACP,EAAA,EAAMS,WAAP,CACE1E,MAAO,CAAEuB,SAAU,OAAQiD,WAAY,KADzC,UAGG,IACAxG,EACC2G,EAAS7G,GAAT,gBAEA,wBACC,OAEL,eAACmG,EAAA,EAAMS,WAAP,CACE1E,MAAO,CAAEuB,SAAU,OAAQiD,WAAY,KADzC,UAGG,IACAI,EAAU,GAAV,gBAAiC,qBAQ9C,eAAC/C,EAAA,EAAKG,IAAN,WACE,cAACH,EAAA,EAAKI,OAAN,CAAa9F,MAAO,IACpB,cAAC0F,EAAA,EAAKI,OAAN,CAAa9F,MAAO,GAApB,SACE,8BACG6B,EACC,gCACE,qBAAKgC,MAAO,CAAEgE,aAAc,MAA5B,SACE,+BAAK3F,EAAL,gCAEF,cAAC1C,EAAD,CACEM,UAAWoC,EACXlB,QAASvB,EAAM+C,cACfuE,IAAKpF,EACLhC,KAAMF,EAAM6C,SAIhB,oCASP,2D,kCCveIoG,MAxGf,WACE,IAEA,EAA0CtH,mBAAS,CAAC,4BAApD,mBAAOoB,EAAP,KAAsBmG,EAAtB,KACA,EAA4CvH,mBAAS,MAArD,mBAAO8C,EAAP,KAAuBT,EAAvB,KASMY,EAAU,CACd,CAAEX,MAAO,eAAgBE,MAAO,iBAChC,CAAEF,MAAO,UAAWE,MAAO,WAC3B,CAAEF,MAAO,gBAAiBE,MAAO,iBACjC,CAAEF,MAAO,OAAQE,MAAO,QACxB,CAAEF,MAAO,WAAYE,MAAO,YAC5B,CAAEF,MAAO,MAAOE,MAAO,QAGzBxB,qBAAU,WAGR,GAAI8B,EAAgB,CAClB,IAAI0E,EAAqB1E,EAAeR,MAAMS,OAAO,eACrDwE,EAAiBC,MAElB,CAAC1E,IAEJ,IAAM2E,EAAiB,WAKrB,OACE,8BACE,cAAC,IAAD,CACExE,QAASA,EACTX,MAAOQ,EACPI,YAAa,mBACbC,WAAW,EACXV,MAXS,CACbuB,SAAU,IAUQvC,OAEd2B,SAAUf,OA2BlB,EAAmCrC,mBAAS,IAA5C,mBAAO0H,EAAP,KAAmBC,EAAnB,KACA,EAAgC3H,mBAAS,WAAzC,mBASA,OATA,UACAgB,qBAAU,WACR,sBAAC,8BAAA4G,EAAA,sEACmBC,MAAMC,GADzB,cACOC,EADP,gBAE0BA,EAAIC,OAF9B,OAEON,EAFP,OAICC,EAAaD,GAJd,0CAAD,KAMC,IACCA,EAEA,8BACE,cAACpD,EAAA,EAAD,CAAME,SAAO,EAAb,SACE,cAACF,EAAA,EAAKG,IAAN,UACE,eAACH,EAAA,EAAKI,OAAN,WACE,qBAAKvC,MAAM,iBAAX,SACE,cAACsF,EAAD,MAGF,cAAC,EAAD,CAAMlJ,KAAMuJ,EAAS5G,IAAKA,EAAKE,cAAeA,aAQjD,cAAC,IAAD,KCnGS6G,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZN,IAAMC,EAAYC,SAASC,cAAc,QACzCF,EAAUG,IAAM,aAChBH,EAAUI,KACR,iEACFH,SAASI,KAAKC,YAAYN,GAE1BO,IAASC,OAAO,cAAC,EAAD,IAASP,SAASQ,eAAe,SDqH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.93955aa0.chunk.js","sourcesContent":["import React, { useRef, useEffect, useState } from \"react\";\nimport { select, geoPath, geoMercator, min, max, scaleLinear } from \"d3\";\nimport { Grid, GridColumn, Image } from \"semantic-ui-react\";\nimport * as d3 from \"d3\";\nimport Select from \"react-select\";\nimport _ from \"lodash\";\nimport { scaleQuantile } from \"d3-scale\";\nimport { Table, Header } from \"semantic-ui-react\";\nimport ReactTooltip from \"react-tooltip\";\nimport statedic from \"./statedic.json\";\nimport nationdic from \"./nation.json\";\nimport {\n  BarChart,\n  Bar,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Legend,\n  ResponsiveContainer,\n} from \"recharts\";\nimport {\n  CircularProgressbar,\n  buildStyles,\n  CircularProgressbarWithChildren,\n} from \"react-circular-progressbar\";\nimport \"react-circular-progressbar/dist/styles.css\";\n// import sq from '@vx/scale/scaleQuantile';\nimport \"./maps.css\";\nimport {\n  ComposableMap,\n  Geographies,\n  ZoomableGroup,\n  Geography,\n} from \"react-simple-maps\";\nimport { Dropdown } from \"semantic-ui-react\";\n// import { LegendQuantile } from 'react-d3-legends';\nimport {\n  LegendLinear,\n  LegendQuantile,\n  LegendOrdinal,\n  LegendSize,\n  LegendThreshold,\n  LegendItem,\n  LegendLabel,\n} from \"@vx/legend\";\nfunction CBar(props) {\n  const cur = props.data.filter(function (item) {\n    return item[\"STATE_NAME\"] == props.statename;\n  });\n \n  return (\n    <ResponsiveContainer width=\"100%\" height={400}>\n      <BarChart\n        data={cur}\n        margin={{\n          top: 5,\n          right: 30,\n          left: 0,\n          bottom: 5,\n        }}\n      >\n        <CartesianGrid strokeDasharray=\"3 3\" />\n        <XAxis dataKey=\"COUNTY_NAME\" tick={false} />\n        <YAxis />\n        <Tooltip />\n        <Legend />\n        {typeof props.disease === \"object\" ? (\n          <Bar dataKey={props.disease[0]} fill=\"#396EB0\" />\n        ) : (\n          <Bar dataKey={props.disease} fill=\"#396EB0\" />\n        )}\n        {/* <Bar dataKey={props.disease} fill=\"#8884d8\" /> */}\n        {/* <Bar dataKey=\"uv\" fill=\"#82ca9d\" />  */}\n      </BarChart>\n    </ResponsiveContainer>\n  );\n}\nconst geoUrl = \"https://cdn.jsdelivr.net/npm/us-atlas@3/counties-10m.json\";\nfunction Mapo(props) {\n  const [statesData, setStateData] = useState(props.data);\n  const [maximum, setMaximum] = useState(0);\n  const svgRef = useRef();\n  const [colourScale, setColourScale] = useState();\n  const pathRef = useRef();\n  const [colorfunction, setColorfunction] = useState();\n  const [clickedfips, setClickedfips] = useState();\n  const [clicked, setClicked] = useState(false);\n\n  const [statefips, setStatefips] = useState(\"_nation\");\n  const [statename, setStateName] = useState(\"the United States\");\n  const [clickedState, setStateClickedState] = useState(\"the United States\");\n  useEffect(() => {\n    setMaximum(\n      d3.max(props.csv, function (d) {\n        return d[props.ChosenDisease];\n      })\n    );\n    let colorScale = scaleQuantile()\n      .domain([\n        0,\n        d3.max(props.csv, function (d) {\n      \n          return d[props.ChosenDisease];\n        }),\n      ])\n      .range([\n        \"#fff7ec\",\n        \"#fee8c8\",\n        \"#fdd49e\",\n        \"#fdbb84\",\n        \"#fc8d59\",\n        \"#ef6548\",\n        \"#d7301f\",\n        \"#990000\",\n      ]);\n    setColorfunction(colorScale);\n \n    const svg = select(svgRef.current);\n    let scales = {};\n    _.each(props.csv, (d) => {\n      scales[d[\"COUNTY_NAME\"]] = colorScale(d[props.ChosenDisease]);\n    });\n\n    setColourScale(scales);\n\n  }, [props.ChosenDisease]);\n\n  const CountyList = ({ list }) => {\n    return (\n      <div>\n        <p>List of Counties in {clickedState}</p>\n        <ul>\n          {list.map((item) => (\n            <CountyListItem key={item.id} item={item} />\n          ))}\n        </ul>\n      </div>\n    );\n  };\n\n  const CountyListItem = ({ item }) => {\n    const styles = {\n      //color: colourScale[item.COUNTY_NAME],\n      color: \"blue\",\n    };\n\n    return (\n      <div>\n        <li\n          class=\"county\"\n          onClick={() =>\n            setSelectedOption({\n              value: item.COUNTY_NAME,\n              label: item.COUNTY_NAME,\n            })\n          }\n        >\n          <div class=\"input-color\">\n            <div\n              class=\"color-box\"\n              style={{ backgroundColor: colourScale[item.COUNTY_NAME] }}\n            ></div>\n            <div class=\"CountyName\">{item.COUNTY_NAME}</div>\n          </div>\n        </li>\n      </div>\n    );\n  };\n\n  const filteredCountyList = props.csv.filter(function (item) {\n    return item.STATE_NAME === clickedState;\n  });\n\n  const filteredCountyOptions = filteredCountyList.map((item) => {\n    return { value: item.COUNTY_NAME, label: item.COUNTY_NAME };\n  });\n\n  //select county\n  const [selectedOption, setSelectedOption] = useState(null);\n\n  useEffect(() => {\n\n    if (selectedOption) {\n      let disease_prevalence = selectedOption.value.concat(\"_prevalence\");\n    \n    }\n  }, [selectedOption]);\n\n  const CountyDropdown = () => {\n    return (\n      <div>\n        <Select\n          options={filteredCountyOptions}\n          value={selectedOption}\n          placeholder={\"Select a County\"}\n          clearable={false}\n   \n\n          onChange={setSelectedOption}\n          //\n        >\n        \n        </Select>\n      </div>\n    );\n  };\n\n  const CountyPercentageCircle = (data) => {\n\n    let ChosenCounty = filteredCountyList.filter(function (item) {\n      if (selectedOption) {\n        return item.COUNTY_NAME === selectedOption.value;\n      }\n    });\n    // ChosenCounty = ChosenCounty[0];\n    let percent = \"\";\n    let ChosenCountyName = \" \";\n    if (ChosenCounty.length != 0) {\n      ChosenCountyName = ChosenCounty[0][\"COUNTY_NAME\"];\n      Array.isArray(props.ChosenDisease)\n        ? (percent = ChosenCounty[0][props.ChosenDisease[0]])\n        : (percent = ChosenCounty[0][props.ChosenDisease]);\n    }\n\n    return (\n      <div>\n        <div>\n          <h2 style={{ textSize: \"12px\" }}></h2>\n        </div>\n        <CircularProgressbarWithChildren\n          styles={buildStyles({ textSize: \"16px\", pathColor: \"#990000\" })}\n          value={percent}\n          // text={`${percent}%`}\n        >\n          <div\n            style={{\n              fontSize: 20,\n              width: \"70%\",\n              marginTop: -5,\n              lineHeight: 1.5,\n              justifyContent: \"center\",\n            }}\n          >\n            <center>\n              {props.ChosenDisease} in {ChosenCountyName}\n              <br />\n              <strong style={{ fontsSize: 30 }}>{percent}%</strong>\n            </center>\n          </div>\n        </CircularProgressbarWithChildren>\n      </div>\n    );\n  };\n\n  const legendGlyphSize = 15;\n  let colorScale = scaleQuantile()\n    .domain([\n      0,\n      d3.max(props.csv, function (d) {\n        return d[props.ChosenDisease].toFixed(0);\n      }),\n    ])\n    .range([\n      \"#fff7ec\",\n      \"#fee8c8\",\n      \"#fdd49e\",\n      \"#fdbb84\",\n      \"#fc8d59\",\n      \"#ef6548\",\n      \"#d7301f\",\n      \"#990000\",\n    ]);\n  if (colourScale) {\n \n    return (\n      <div>\n        <Grid columns={3} divided>\n          <Grid.Row>\n            <Grid.Column width={2}>\n              <div class=\"CountyList\">\n                {\" \"}\n                <CountyList list={filteredCountyList} id=\"growth\" />\n              </div>\n            </Grid.Column>\n            {/* <svg class='legend'></svg> */}\n\n            <Grid.Column width={10}>\n              <h1>\n                {props.ChosenDisease} in {clickedState}\n              </h1>\n              <div>\n                <div\n                  style={{\n                    width: \"100%\",\n                    display: \"flex\",\n                    justifyContent: \"center\",\n                    fontSize: \"14px\",\n                  }}\n                >\n                  {\" \"}\n                  <LegendQuantile scale={colorScale}>\n                    {(labels) =>\n                      labels.map((label, i) => (\n                        <LegendItem key={`legend-${i}`}>\n                          <svg\n                            width={legendGlyphSize}\n                            height={legendGlyphSize}\n                            style={{ margin: \"2px 0\" }}\n                          >\n                            <circle\n                              fill={label.value}\n                              r={legendGlyphSize / 2}\n                              cx={legendGlyphSize / 2}\n                              cy={legendGlyphSize / 2}\n                            />\n                          </svg>\n                          <LegendLabel align=\"left\" margin=\"0 4px\">\n                            {label.text}\n                          </LegendLabel>\n                        </LegendItem>\n                      ))\n                    }\n                  </LegendQuantile>\n                </div>\n              </div>\n              <div>\n                <ComposableMap\n                  data-tip\n                  data-for=\"states\"\n                  projection=\"geoAlbersUsa\"\n                >\n                  <ZoomableGroup>\n                    <Geographies geography={geoUrl}>\n                      {({ geographies }) =>\n                        geographies.map((geo) => {\n                          {\n                           \n                          }\n                          return (\n                            <Geography\n                              key={geo.rsmKey}\n                              geography={geo}\n                              onClick={() => {\n                                const fip = geo.id.substring(0, 2);\n                                const cur = props.csv.find(\n                                  (s) => s[\"STATE_FIPS\"] + \"\" === fip\n                                );\n                                setStateClickedState(cur[\"STATE_NAME\"]);\n                                setClickedfips(fip);\n                                setClicked(true);\n                              }}\n                              onMouseEnter={() => {\n                                const fip = geo.id.substring(0, 2);\n                                const cur = props.csv.find(\n                                  (s) => s[\"STATE_FIPS\"] + \"\" === fip\n                                );\n                                setStatefips(fip);\n                            \n                                setStateName(cur[\"STATE_NAME\"]);\n                              }}\n                              onMouseLeave={() => {\n                                setStatefips(\"_nation\");\n                                setStateName(\"the United States\");\n                              }}\n                              style={{\n                                default: {\n                                  outline: \"none\",\n                                },\n                                hover: {\n                                  outline: \"none\",\n                                },\n                                pressed: {\n                                  outline: \"none\",\n                                },\n                              }}\n                              fill={\n                                geo.id.substring(0, 2) === statefips\n                                  ? \"yellow\"\n                                  : colourScale[geo.properties.name]\n                                  ? colourScale[geo.properties.name]\n                                  : \"#EEE\"\n                              }\n                            />\n                          );\n                        })\n                      }\n                    </Geographies>\n                  </ZoomableGroup>\n                </ComposableMap>\n                <ReactTooltip id=\"states\">\n                  <font size=\"20px\">\n                    <b>{statename}</b>{\" \"}\n                  </font>\n                  <br />\n                  <b>Click for data about the counties .</b>\n                </ReactTooltip>\n              </div>\n            </Grid.Column>\n            <Grid.Column width={4}>\n              <div style={{ width: \"90%\", marginBottom: \"10%\" }}>\n                <h2>Choose a county to view county statistics</h2>\n                <div style={{ marginBottom: \"3%\" }}>\n                  <CountyDropdown />\n                </div>\n                <CountyPercentageCircle data={props.csv} />\n              </div>\n              <Table celled fixed style={{ width: \"90%\" }}>\n                <Table.Header>\n                  <tr\n                    textalign=\"center\"\n                    colSpan=\"3\"\n                    style={{ backgroundColor: \"#94B3FD\" }}\n                  >\n                    <td\n                      colSpan=\"1\"\n                      style={{\n                        fontSize: \"14px\",\n                        textAlign: \"center\",\n                        fontWeight: 700,\n                        color: \"black\",\n                      }}\n                    >\n                      Disease Total Counts{\" \"}\n                    </td>\n                    <td\n                      colSpan=\"1\"\n                      style={{\n                        fontSize: \"14px\",\n                        textAlign: \"center\",\n                        fontWeight: 700,\n                        color: \"black\",\n                      }}\n                    >\n                      {\" \"}\n                      {clicked ? clickedState : \"\"}\n                    </td>\n                    <td\n                      colSpan=\"1\"\n                      style={{\n                        fontSize: \"14px\",\n                        textAlign: \"center\",\n                        fontWeight: 700,\n                        color: \"black\",\n                      }}\n                    >\n                      {\" \"}\n                      U.S.\n                    </td>\n                  </tr>\n\n                  <Table.Row textAlign=\"center\">\n                    <Table.HeaderCell\n                      style={{ fontSize: \"14px\", fontWeight: 700 }}\n                    >\n                      {\" \"}\n                      {\"Obesity\"}{\" \"}\n                    </Table.HeaderCell>\n                    <Table.HeaderCell\n                      style={{ fontSize: \"14px\", fontWeight: 700 }}\n                    >\n                      {\" \"}\n                      {clicked ? (\n                        statedic[clickedfips][\"Obesity_number\"]\n                      ) : (\n                        <div></div>\n                      )}{\" \"}\n                    </Table.HeaderCell>\n                    <Table.HeaderCell\n                      style={{ fontSize: \"14px\", fontWeight: 700 }}\n                    >\n                      {\" \"}\n                      {nationdic[0][\"Obesity_number\"]}{\" \"}\n                    </Table.HeaderCell>\n                  </Table.Row>\n                  <Table.Row textAlign=\"center\">\n                    <Table.HeaderCell\n                      style={{ fontSize: \"14px\", fontWeight: 700 }}\n                    >\n                      {\" \"}\n                      {\"CKD\"}{\" \"}\n                    </Table.HeaderCell>\n                    <Table.HeaderCell\n                      style={{ fontSize: \"14px\", fontWeight: 700 }}\n                    >\n                      {\" \"}\n                      {clicked ? (\n                        statedic[clickedfips][\"CKD_number\"]\n                      ) : (\n                        <div></div>\n                      )}{\" \"}\n                    </Table.HeaderCell>\n                    <Table.HeaderCell\n                      style={{ fontSize: \"14px\", fontWeight: 700 }}\n                    >\n                      {\" \"}\n                      {nationdic[0][\"CKD_number\"]}{\" \"}\n                    </Table.HeaderCell>\n                  </Table.Row>\n                  <Table.Row textAlign=\"center\">\n                    <Table.HeaderCell\n                      style={{ fontSize: \"14px\", fontWeight: 700 }}\n                    >\n                      {\" \"}\n                      {\"COPD\"}{\" \"}\n                    </Table.HeaderCell>\n                    <Table.HeaderCell\n                      style={{ fontSize: \"14px\", fontWeight: 700 }}\n                    >\n                      {\" \"}\n                      {clicked ? (\n                        statedic[clickedfips][\"COPD_number\"]\n                      ) : (\n                        <div></div>\n                      )}{\" \"}\n                    </Table.HeaderCell>\n                    <Table.HeaderCell\n                      style={{ fontSize: \"14px\", fontWeight: 700 }}\n                    >\n                      {\" \"}\n                      {nationdic[0][\"COPD_number\"]}{\" \"}\n                    </Table.HeaderCell>\n                  </Table.Row>\n                  <Table.Row textAlign=\"center\">\n                    <Table.HeaderCell\n                      style={{ fontSize: \"14px\", fontWeight: 700 }}\n                    >\n                      {\" \"}\n                      {\"Heart Disease \"}{\" \"}\n                    </Table.HeaderCell>\n                    <Table.HeaderCell\n                      style={{ fontSize: \"14px\", fontWeight: 700 }}\n                    >\n                      {\" \"}\n                      {clicked ? (\n                        statedic[clickedfips][\"Heart disease_number\"]\n                      ) : (\n                        <div></div>\n                      )}{\" \"}\n                    </Table.HeaderCell>\n                    <Table.HeaderCell\n                      style={{ fontSize: \"14px\", fontWeight: 700 }}\n                    >\n                      {\" \"}\n                      {nationdic[0][\"Heart disease_number\"]}{\" \"}\n                    </Table.HeaderCell>\n                  </Table.Row>\n                  <Table.Row textAlign=\"center\">\n                    <Table.HeaderCell\n                      style={{ fontSize: \"14px\", fontWeight: 700 }}\n                    >\n                      {\" \"}\n                      {\"Diabetes \"}{\" \"}\n                    </Table.HeaderCell>\n                    <Table.HeaderCell\n                      style={{ fontSize: \"14px\", fontWeight: 700 }}\n                    >\n                      {\" \"}\n                      {clicked ? (\n                        statedic[clickedfips][\"diabetes_number\"]\n                      ) : (\n                        <div></div>\n                      )}{\" \"}\n                    </Table.HeaderCell>\n                    <Table.HeaderCell\n                      style={{ fontSize: \"14px\", fontWeight: 700 }}\n                    >\n                      {\" \"}\n                      {nationdic[0][\"diabetes_number\"]}{\" \"}\n                    </Table.HeaderCell>\n                  </Table.Row>\n\n                </Table.Header>\n              </Table>\n            </Grid.Column>\n          </Grid.Row>\n          <Grid.Row>\n            <Grid.Column width={2}></Grid.Column>\n            <Grid.Column width={12}>\n              <div>\n                {clicked ? (\n                  <div>\n                    <div style={{ marginBottom: \"2%\" }}>\n                      <h2>{clickedState} County level comparison</h2>\n                    </div>\n                    <CBar\n                      statename={clickedState}\n                      disease={props.ChosenDisease}\n                      fip={clickedfips}\n                      data={props.csv}\n                    />\n                  </div>\n                ) : (\n                  <div></div>\n                )}\n              </div>\n            </Grid.Column>\n          </Grid.Row>\n        </Grid>\n      </div>\n    );\n  } else {\n    return <p> Please enable Javascript</p>;\n  }\n}\nexport default Mapo;\n","import React, { useEffect, useState } from \"react\";\nimport { Grid, Image } from \"semantic-ui-react\";\nimport data from \"./customgeo.json\";\nimport \"./App.css\";\nimport { Dropdown } from \"semantic-ui-react\";\nimport datageo from \"./components/usmap.json\";\nimport Mapo from \"./components/maps.js\";\nimport ReactLoading from \"react-loading\";\nimport csv from \"./convertcsv.json\";\nimport Dropdownbutton from \"./components/MapDropdown\";\nimport Select from \"react-select\";\nfunction App() {\n  const diseaselist = [\"Obesity\", \"Heart disease\", \"COPD\", \"diabetes\", \"CKD\"];\n\n  const [ChosenDisease, setChosenDisease] = useState([\"anycondition_prevalence\"]);\n  const [selectedOption, setSelectedOption] = useState(null);\n\n  const handleChoiceChange = (e) => {\n    // setSelectedOption;\n    let disease_prevalence = e.concat(\"_prevalence\");\n    console.log(disease_prevalence);\n    setChosenDisease(disease_prevalence);\n  };\n\n  const options = [\n    { value: \"anycondition\", label: \"Any Condition\" },\n    { value: \"Obesity\", label: \"Obesity\" },\n    { value: \"Heart disease\", label: \"Heart Disease\" },\n    { value: \"COPD\", label: \"COPD\" },\n    { value: \"diabetes\", label: \"Diabetes\" },\n    { value: \"CKD\", label: \"CKD\" },\n  ];\n\n  useEffect(() => {\n  \n   \n    if (selectedOption) {\n      let disease_prevalence = selectedOption.value.concat(\"_prevalence\");\n      setChosenDisease(disease_prevalence);\n    }\n  }, [selectedOption]);\n\n  const DropdownButton = () => {\n    const styles = {\n      fontSize: 50,\n      // color: \"blue\",\n    };\n    return (\n      <div>\n        <Select\n          options={options}\n          value={selectedOption}\n          placeholder={\"Select a disease\"}\n          clearable={false}\n          style={styles.select}\n      \n          onChange={setSelectedOption}\n          //\n        >\n        \n        </Select>\n      </div>\n    );\n  };\n\n  const DropdownButtonCounty = () => {\n    return (\n      <div>\n        <Select\n          options={options}\n          value={selectedOption}\n          placeholder={\"Select a disease\"}\n          clearable={false}\n          // style={styles.select}\n          onChange={setSelectedOption}\n          //\n        >\n       \n        </Select>\n      </div>\n    );\n  };\n\n  const [statesData, setStateData] = useState([]);\n  const [property, setProperty] = useState(\"pop_est\");\n  useEffect(() => {\n    (async () => {\n      const res = await fetch(datageo);\n      const statesData = await res.json();\n      // Set the statesData with the data received from fetch().\n      setStateData(statesData);\n    })();\n  }, []);\n  if (statesData) {\n    return (\n      <div>\n        <Grid divided>\n          <Grid.Row>\n            <Grid.Column>\n              <div class=\"DropdownToggle\">\n                <DropdownButton />\n              </div>\n          \n              <Mapo data={datageo} csv={csv} ChosenDisease={ChosenDisease} />\n            </Grid.Column>\n           \n          </Grid.Row>\n        </Grid>\n      </div>\n    );\n  } else {\n    return <ReactLoading />;\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nconst styleLink = document.createElement(\"link\");\nstyleLink.rel = \"stylesheet\";\nstyleLink.href =\n  \"https://cdn.jsdelivr.net/npm/semantic-ui/dist/semantic.min.css\";\ndocument.head.appendChild(styleLink);\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}