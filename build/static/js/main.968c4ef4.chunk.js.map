{"version":3,"sources":["components/BarChartData.js","components/USMap.js","components/Map.js","components/maps.js","App.js","serviceWorker.js","index.js"],"names":["USMap","data","property","console","log","svgRef","useRef","wrapperRef","useState","selectedCountry","useEffect","svg","select","current","getBoundingClientRect","width","height","projection","geoMercator","fitSize","precision","pathGenerator","geoPath","selectAll","features","enter","append","classed","attr","feature","ref","style","marginBottom","Map","Mapo","props","statesData","maximum","setMaximum","csv","pathRef","d3","d","Obesity_prevalence","colorScale","domain","range","viewBox","map","stateData","index","cursor","fill","stroke","strokeWidth","shape","onMouseOver","event","target","onMouseOut","App","setStateData","a","fetch","datageo","res","json","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+SAyBA,I,qBC4CqBA,MAjErB,YAAgC,IAAhBC,EAAe,EAAfA,KAAe,EAAVC,SACbC,QAAQC,IAAIH,GACZ,IAAMI,EAASC,mBACTC,EAAaD,mBAEnB,EAA8CE,mBAAS,MAAvD,mBAAOC,EAAP,KAqDA,OArDA,KAGAC,qBAAU,WACR,IAAMC,EAAMC,YAAOP,EAAOQ,SAU1B,EACGN,EAAWM,QAAQC,wBADdC,EAAR,EAAQA,MAAOC,EAAf,EAAeA,OAITC,EAAaC,cAChBC,QAAQ,CAACJ,EAAOC,GAASP,GAAmBR,GAC5CmB,UAAU,KAIPC,EAAgBC,cAAUL,WAAWA,GAiB3CN,EACCY,UAAU,QACVtB,KAAKA,EAAKuB,UACVC,QACAC,OAAO,QACPC,QAAQ,WAAU,GAClBC,KAAK,KAAK,SAAAC,GAAO,OAAIR,EAAcQ,MACnCD,KAAK,OAAO,QACZA,KAAK,SAAS,UAEd,CAAC3B,IAGF,qBAAK6B,IAAKvB,EAAYwB,MAAO,CAAEC,aAAc,QAA7C,SACE,qBAAKF,IAAKzB,O,OCpBN4B,I,QCcDC,MAvDf,SAAeC,GACX,MAAgC3B,mBAAS2B,EAAMlC,MAA/C,mBAAOmC,EAAP,KACA,GADA,KAC2B5B,mBAAS,IAApC,mBAAO6B,EAAP,KAAeC,EAAf,KACAnC,QAAQC,IAAIgC,GACZjC,QAAQC,IAAI+B,EAAMI,KAClB,IAAMlC,EAASC,mBACTkC,EAAQlC,mBA2Bd,OAzBAI,qBAAU,WAEN4B,EAAWG,IAAON,EAAMI,KAAI,SAASG,GAEnC,OADAvC,QAAQC,IAAIsC,EAAEC,oBACPD,EAAEC,uBAEVxC,QAAQC,IAAIiC,GACb,IAAIO,EAAWH,MAAiBI,OAAO,CAAC,EAAGJ,IAAON,EAAMI,KAAI,SAASG,GAEnE,OADAvC,QAAQC,IAAIsC,EAAEC,oBACPD,EAAEC,wBACLG,MAAM,CAAC,IAAI,IACJlC,YAAOP,EAAOQ,SAC1BV,QAAQC,IAAIwC,EAAW,SAY1B,IAEE,qBAAKd,IAAKzB,EAAQ0C,QAAQ,cAA1B,SACGX,EAAWY,KAAI,SAACC,EAAWC,GAAZ,OACd,sBACEnB,MAAO,CAACoB,OAAQ,UAAWC,KAAM,QAEjCtB,IAAKU,EACLa,OAAO,OACPC,YAAY,MACZZ,EAAGO,EAAUM,MACbC,YAAa,SAACC,GACZA,EAAMC,OAAO3B,MAAMqB,KAAO,OAE5BO,WAAY,SAACF,GACXA,EAAMC,OAAO3B,MAAMqB,KAAO,SATvBF,S,yBCHJU,MA5Bf,WACE,MAAgCpD,mBAAS,IAAzC,mBAAO4B,EAAP,KAAkByB,EAAlB,KACA,EAA6BrD,mBAAS,WAAtC,mBAAON,EAAP,KASA,OATA,KACAQ,qBAAU,WACR,sBAAC,8BAAAoD,EAAA,sEACmBC,MAAMC,GADzB,cACOC,EADP,gBAE0BA,EAAIC,OAF9B,OAEO9B,EAFP,OAICyB,EAAazB,GAJd,0CAAD,KAMC,IACAA,EAEF,sCACI,cAAC,EAAD,CAAOnC,KAAMA,EAAMC,SAAUA,IAChC,cAAC,EAAD,CAAMD,KAAM+D,EAASzB,IAAKA,OAQ5B,cAAC,IAAD,KCrBkB4B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.968c4ef4.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport { csv } from 'd3-fetch'\nimport { ascending } from 'd3-array'\nimport BarChart from './BarChart'\n\nconst parseNA = string => (string === 'NA' ? undefined : string)\n\nfunction type(d) {\n  return {\n    genre: parseNA(d.genre),\n    revenue: +d.revenue,\n  }\n}\n\nfunction filterData(data) {\n  return data.filter(d => {\n    return d.revenue > 0\n  })\n}\n\nfunction prepareBarChartData(data) {\n  // usually more wrangling is required but the example data is simple\n  return data\n}\n\nconst BarChartData = () => {\n  const [barChartData, setBarChartData] = useState(null)\n\n  useEffect(() => {\n    csv('/static/data/barchart.csv', type).then(data => {\n      const dataClean = filterData(data)\n      setBarChartData(\n        prepareBarChartData(dataClean).sort((a, b) => {\n          return ascending(a.genre, b.genre)\n        }),\n      )\n    })\n  }, [])\n\n  if (barChartData === null) {\n    return <p>Loading...</p>\n  }\n\n  return <BarChart data={barChartData} />\n}\n\nexport default BarChartData\n","import React, { useRef, useEffect, useState } from \"react\";\nimport { select, geoPath, geoMercator, min, max, scaleLinear } from \"d3\";\nimport useResizeObserver from \"./useResizeObserver\";\nimport * as d3 from 'd3'\nfunction USMap({data,property}){\n        console.log(data);\n        const svgRef = useRef();\n        const wrapperRef = useRef();\n        // const dimensions = useResizeObserver(wrapperRef);\n        const [selectedCountry, setSelectedCountry] = useState(null);\n        // const dimensions=useResizeObserver(wrapperRef);\n        // will be called initially and on every data change\n        useEffect(() => {\n          const svg = select(svgRef.current);\n      \n        //   const minProp = min(data.features, feature => feature.properties[property]);\n        //   const maxProp = max(data.features, feature => feature.properties[property]);\n        //   const colorScale = scaleLinear()\n        //     .domain([minProp, maxProp])\n        //     .range([\"#ccc\", \"red\"]);\n      \n          // use resized dimensions\n          // but fall back to getBoundingClientRect, if no dimensions yet.\n          const { width, height } =\n             wrapperRef.current.getBoundingClientRect();\n      \n          // projects geo-coordinates on a 2D plane\n          const projection = geoMercator()\n            .fitSize([width, height], selectedCountry || data)\n            .precision(100);\n      \n          // takes geojson data,\n          // transforms that into the d attribute of a path element\n          const pathGenerator = geoPath().projection(projection);\n\n        \n        // console.log(data.features);\n          // render each country\n          // svg\n          //   .selectAll(\".country\")\n          //   .data(data.features)\n          //   .join(\"path\")\n          //   // .on(\"click\", feature => {\n          //   //   setSelectedCountry(selectedCountry === feature ? null : feature);\n          //   // })\n          //   .attr(\"class\", \"country\")\n          //   .transition()\n          //   .attr(\"d\", feature => pathGenerator(feature));\n      \n          // render text\n          svg\n          .selectAll(\"path\")\n          .data(data.features)\n          .enter()\n          .append('path')\n          .classed(\"country\",true)\n          .attr(\"d\", feature => pathGenerator(feature))\n          .attr('fill','#088')\n          .attr('stroke','#000');\n         \n        }, [data]);\n      \n        return (\n          <div ref={wrapperRef} style={{ marginBottom: \"2rem\" }}>\n            <svg ref={svgRef}></svg>\n          </div>\n        );\n      \n    }\n      export default USMap;\n","import React, { useRef, useEffect, useState } from \"react\";\nimport * as d3 from 'd3'\n\nfunction Map (props)  {\n   \n    //////////////////////////////////////////////////////\n    // REFs\n    //////////////////////////////////////////////////////\n    console.log(props.data);\n    const svgRef = useRef();\n    const projRef = useRef(d3.geoMercator().center([-73.93, 40.72]).scale(57500));\n    const pathRef = useRef()\n    useEffect(() => {\n        // GRAB CURRENT WIDTH/HEIGHT OF DIV ID=\"MAP\"\n        const height = svgRef.current.clientHeight;\n        const width = svgRef.current.clientWidth;\n        // FINE TUNE THE POSITION THE MAP WITHING THE ELEMENT\n         projRef.current.translate([width  / 2, height  / 2 ]);\n    \n        // ASSING THE PROJECTION A PROJECTION\n        const path = d3.geoPath().projection(projRef.current);\n        if (props.data.features.length) {\n            console.log(props.data);\n          renderChart(props.data.features, path);\n        }\n     }, [props.data.features]);\n\n     const renderChart = (data, path) => {\n         \n        d3.select(svgRef.current).selectAll('path').data(data).enter()\n          .append('path')\n          .attr('class', (d) => {\n              console.log(d);\n              return d.properties})\n          .attr('d', path)\n        //   .style('fill', (d) => boroughLegend(d.properties.borough))\n      };\n     //////////////////////////////////////////////////////\n    return(    \n        <svg id=\"boroughs-map\" ref={svgRef}>\n        {props.data.features && renderChart()}\n      </svg>\n    )\n }\n export default Map;","import React, { useRef, useEffect, useState } from \"react\";\nimport { select, geoPath, geoMercator, min, max, scaleLinear } from \"d3\";\nimport * as d3 from 'd3'\nfunction Mapo (props){\n    const [statesData,setStateData]=useState(props.data);\n    const [maximum,setMaximum]=useState(0);\n    console.log(statesData);\n    console.log(props.csv);\n    const svgRef = useRef();\n    const pathRef=useRef();\n    \n    useEffect(()=>{\n      \n        setMaximum(d3.max(props.csv,function(d){\n          console.log(d.Obesity_prevalence);\n          return d.Obesity_prevalence;\n         }));\n         console.log(maximum);\n        let colorScale=d3.scaleLinear().domain([0, d3.max(props.csv,function(d){\n          console.log(d.Obesity_prevalence);\n          return d.Obesity_prevalence;\n         })]).range([255,0]);\n         const svg = select(svgRef.current);\n         console.log(colorScale(34.4));\n         // svg.selectAll('path').data(props.csv).enter().attr(\"fill\",function(d){\n         //   console.log(d.Obesity_prevalence);\n         //   var f=colorScale(d.Obesity_prevalence);\n         //   if(f<=25.5){\n         //    return \"rgb(\" + 255 + \",0,0)\";\n         //   }\n         //   else{\n         //   return \"rgb(\" + f + \",\" + f + \",\" + f + \")\"};\n         // })\n     \n     \n    },[])\n    return (\n        <svg ref={svgRef} viewBox=\"0 0 960 600\">\n          {statesData.map((stateData, index) =>\n            <path\n              style={{cursor: \"pointer\", fill: \"blue\"}}\n              key={index}\n              ref={pathRef}\n              stroke=\"#fff\"\n              strokeWidth=\"6px\"\n              d={stateData.shape}\n              onMouseOver={(event) => {\n                event.target.style.fill = 'red';\n              }}\n              onMouseOut={(event) => {\n                event.target.style.fill = 'blue';\n              }}\n            >\n            </path>\n          )}\n        </svg>\n      )\n}\nexport default Mapo;","import React,{useEffect, useState} from 'react';\nimport BarChartData from './components/BarChartData'\nimport data from \"./customgeo.json\"\nimport USMap from\"./components/USMap.js\"\nimport Map from \"./components/Map.js\"\nimport dataus from './us-county-boundaries.json'\nimport datageo from './components/usmap.json'\nimport Mapo from \"./components/maps.js\"\nimport ReactLoading from 'react-loading';\nimport csv from './convertcsv.json';\nfunction App() {\n  const [statesData,setStateData]=useState([]); \n  const [property,setProperty]=useState(\"pop_est\");\n  useEffect(() => {\n    (async () => {\n      const res = await fetch(datageo);\n      const statesData = await res.json();\n      // Set the statesData with the data received from fetch().\n      setStateData(statesData);\n    })();\n  }, []);\n  if(statesData){\n  return (\n  \t<div>\n    // <USMap data={data} property={property}/>\n    <Mapo data={datageo} csv={csv} />\n    </div>\n    \n  )\n}\n\nelse{\nreturn (\n  <ReactLoading/>\n)\n}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}