{"version":3,"sources":["components/BarChartData.js","components/Map.js","components/maps.js","App.js","serviceWorker.js","index.js"],"names":["Map","CBar","props","cur","data","filter","item","statename","console","log","disease","ResponsiveContainer","width","height","margin","top","right","left","bottom","CartesianGrid","strokeDasharray","XAxis","dataKey","tick","YAxis","Tooltip","Legend","Bar","fill","Mapo","useState","maximum","setMaximum","csv","svgRef","useRef","colourScale","setColourScale","setColorfunction","clickedfips","setClickedfips","clicked","setClicked","statefips","setStatefips","setStateName","clickedState","setStateClickedState","useEffect","statedic","d3","d","ChosenDisease","colorScale","scaleQuantile","domain","range","select","current","scales","_","each","CountyList","list","map","CountyListItem","id","class","style","backgroundColor","COUNTY_NAME","filteredCountyList","STATE_NAME","filteredCountyOptions","value","label","selectedOption","setSelectedOption","concat","CountyDropdown","options","placeholder","clearable","onChange","CountyPercentageCircle","ChosenCounty","percent","ChosenCountyName","length","Array","isArray","textSize","styles","buildStyles","pathColor","fontSize","marginTop","lineHeight","justifyContent","fontsSize","toFixed","Grid","columns","divided","Row","Column","display","scale","labels","i","LegendItem","r","legendGlyphSize","cx","cy","LegendLabel","align","text","projection","geography","geographies","geo","onClick","fip","substring","find","s","onMouseEnter","onMouseLeave","default","outline","hover","pressed","properties","name","rsmKey","size","Table","celled","fixed","Header","textalign","colSpan","textAlign","fontWeight","color","HeaderCell","nationdic","App","setChosenDisease","disease_prevalence","DropdownButton","statesData","setStateData","a","fetch","datageo","res","json","Boolean","window","location","hostname","match","styleLink","document","createElement","rel","href","head","appendChild","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3711c2b2.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport { csv } from 'd3-fetch'\nimport { ascending } from 'd3-array'\nimport BarChart from './BarChart'\n\nconst parseNA = string => (string === 'NA' ? undefined : string)\n\nfunction type(d) {\n  return {\n    genre: parseNA(d.genre),\n    revenue: +d.revenue,\n  }\n}\n\nfunction filterData(data) {\n  return data.filter(d => {\n    return d.revenue > 0\n  })\n}\n\nfunction prepareBarChartData(data) {\n  // usually more wrangling is required but the example data is simple\n  return data\n}\n\nconst BarChartData = () => {\n  const [barChartData, setBarChartData] = useState(null)\n\n  useEffect(() => {\n    csv('/static/data/barchart.csv', type).then(data => {\n      const dataClean = filterData(data)\n      setBarChartData(\n        prepareBarChartData(dataClean).sort((a, b) => {\n          return ascending(a.genre, b.genre)\n        }),\n      )\n    })\n  }, [])\n\n  if (barChartData === null) {\n    return <p>Loading...</p>\n  }\n\n  return <BarChart data={barChartData} />\n}\n\nexport default BarChartData\n","import React, { useRef, useEffect, useState } from \"react\";\nimport * as d3 from 'd3'\n\nfunction Map (props)  {\n   \n    //////////////////////////////////////////////////////\n    // REFs\n    //////////////////////////////////////////////////////\n    console.log(props.data);\n    const svgRef = useRef();\n    const projRef = useRef(d3.geoMercator().center([-73.93, 40.72]).scale(57500));\n    const pathRef = useRef()\n    useEffect(() => {\n        // GRAB CURRENT WIDTH/HEIGHT OF DIV ID=\"MAP\"\n        const height = svgRef.current.clientHeight;\n        const width = svgRef.current.clientWidth;\n        // FINE TUNE THE POSITION THE MAP WITHING THE ELEMENT\n         projRef.current.translate([width  / 2, height  / 2 ]);\n    \n        // ASSING THE PROJECTION A PROJECTION\n        const path = d3.geoPath().projection(projRef.current);\n        if (props.data.features.length) {\n            console.log(props.data);\n          renderChart(props.data.features, path);\n        }\n     }, [props.data.features]);\n\n     const renderChart = (data, path) => {\n         \n        d3.select(svgRef.current).selectAll('path').data(data).enter()\n          .append('path')\n          .attr('class', (d) => {\n              console.log(d);\n              return d.properties})\n          .attr('d', path)\n        //   .style('fill', (d) => boroughLegend(d.properties.borough))\n      };\n     //////////////////////////////////////////////////////\n    return(    \n        <svg id=\"boroughs-map\" ref={svgRef}>\n        {props.data.features && renderChart()}\n      </svg>\n    )\n }\n export default Map;","import React, { useRef, useEffect, useState } from \"react\";\nimport { select, geoPath, geoMercator, min, max, scaleLinear } from \"d3\";\nimport { Grid, GridColumn, Image } from \"semantic-ui-react\";\nimport * as d3 from \"d3\";\nimport Select from \"react-select\";\nimport _ from \"lodash\";\nimport { scaleQuantile } from \"d3-scale\";\nimport { Table, Header } from 'semantic-ui-react'\nimport ReactTooltip from \"react-tooltip\";\nimport statedic from \"./statedic.json\";\nimport nationdic from \"./nation.json\";\nimport {\n  BarChart,\n  Bar,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Legend, ResponsiveContainer\n} from \"recharts\";\nimport {\n  CircularProgressbar,\n  buildStyles,\n  CircularProgressbarWithChildren,\n} from \"react-circular-progressbar\";\nimport \"react-circular-progressbar/dist/styles.css\";\n// import sq from '@vx/scale/scaleQuantile';\nimport \"./maps.css\";\nimport {\n  ComposableMap,\n  Geographies,\n  ZoomableGroup,\n  Geography,\n} from \"react-simple-maps\";\nimport { Dropdown } from \"semantic-ui-react\";\n// import { LegendQuantile } from 'react-d3-legends';\nimport {\n  LegendLinear,\n  LegendQuantile,\n  LegendOrdinal,\n  LegendSize,\n  LegendThreshold,\n  LegendItem,\n  LegendLabel,\n} from \"@vx/legend\";\nfunction CBar(props) {\n  const cur = props.data.filter(function (item) {\n    return item['STATE_NAME'] == props.statename;\n  });\n  console.log(cur);\n\n  console.log(typeof (props.disease));\n  return (\n    <ResponsiveContainer width=\"100%\" height={400}><BarChart\n\n      data={cur}\n      margin={{\n        top: 5,\n        right: 30,\n        left: 0,\n        bottom: 5\n      }}\n    >\n      <CartesianGrid strokeDasharray=\"3 3\" />\n      <XAxis dataKey=\"COUNTY_NAME\" tick={false} />\n      <YAxis />\n      <Tooltip />\n      <Legend />\n      {typeof (props.disease) === 'object' ? <Bar dataKey={props.disease[0]} fill=\"#396EB0\" /> : <Bar dataKey={props.disease} fill=\"#396EB0\" />}\n      {/* <Bar dataKey={props.disease} fill=\"#8884d8\" /> */}\n      {/* <Bar dataKey=\"uv\" fill=\"#82ca9d\" />  */}\n    </BarChart></ResponsiveContainer>)\n}\nconst geoUrl = \"https://cdn.jsdelivr.net/npm/us-atlas@3/counties-10m.json\";\nfunction Mapo(props) {\n  const [statesData, setStateData] = useState(props.data);\n  const [maximum, setMaximum] = useState(0);\n  // console.log(statesData);\n  console.log(props.csv);\n  const svgRef = useRef();\n  const [colourScale, setColourScale] = useState();\n  const pathRef = useRef();\n  const [colorfunction, setColorfunction] = useState();\n  const [clickedfips, setClickedfips] = useState();\n  const [clicked, setClicked] = useState(false);\n\n  const [statefips, setStatefips] = useState(\"_nation\");\n  const [statename, setStateName] = useState(\"the United States\");\n  const [clickedState, setStateClickedState] = useState(\"the United States\");\n  useEffect(() => {\n    console.log(statedic);\n    setMaximum(\n      d3.max(props.csv, function (d) {\n        // console.log(d.Obesity_prevalence);\n        //return(d.Obesity_prevalence)\n        // console.log(d[props.ChosenDisease]);\n        // console.log(props.ChosenDisease);\n        return d[props.ChosenDisease];\n      })\n    );\n\n    console.log(maximum);\n\n    let colorScale = scaleQuantile()\n      .domain([\n        0,\n        d3.max(props.csv, function (d) {\n          // console.log(d.Obesity_prevalence);\n          return d[props.ChosenDisease];\n        }),\n      ])\n      .range([\n        \"#fff7ec\",\n        \"#fee8c8\",\n        \"#fdd49e\",\n        \"#fdbb84\",\n        \"#fc8d59\",\n        \"#ef6548\",\n        \"#d7301f\",\n        \"#990000\",\n      ]);\n    //       var legendSvg = svg.append('g')\n    setColorfunction(colorScale);\n    //          .attr('class', 'legend')\n    //         .attr(\"transform\",\"translate(\"+ (width - 40) + \",20)\")\n\n    // // Define the legend as you did\n    // var legend = legendColor()\n    //                  .useClass(true)\n    //                  .shape('rect')\n    //                  .orient('vertical')\n    //                  .title('Temperature Variance')\n    //                  .scale(colorScale);\n\n    // // And then call legend on the legendSvg not on svg itself\n    //  legendSvg.call(legend);\n\n    const svg = select(svgRef.current);\n    console.log(colorScale(34.4));\n    let scales = {};\n    _.each(props.csv, (d) => {\n      scales[d[\"COUNTY_NAME\"]] = colorScale(d[props.ChosenDisease]);\n    });\n    // console.log(scales);\n    setColourScale(scales);\n    console.log(scales);\n    // console.log(colourScale);\n    //  svg.selectAll('path').data(props.csv).enter().attr(\"fill\",function(d){\n    //    console.log(d.Obesity_prevalence);\n    //    var f=colorScale(d.Obesity_prevalence);\n    //    if(f<=25.5){\n    //     return \"rgb(\" + 255 + \",0,0)\";\n    //    }\n    //    else{\n    //    return \"rgb(\" + f + \",\" + f + \",\" + f + \")\"};\n    //  })\n  }, [props.ChosenDisease]);\n\n  const CountyList = ({ list }) => {\n    return (\n      <div>\n        <p>List of Counties in {clickedState}</p>\n        <ul>\n          {list.map((item) => (\n            <CountyListItem key={item.id} item={item} />\n          ))}\n        </ul>\n      </div>\n    );\n  };\n\n  const CountyListItem = ({ item }) => {\n    const styles = {\n      //color: colourScale[item.COUNTY_NAME],\n      color: \"blue\",\n    };\n\n    return (\n      <div>\n        <li>\n          <div class=\"input-color\">\n            <div\n              class=\"color-box\"\n              style={{ backgroundColor: colourScale[item.COUNTY_NAME] }}\n            ></div>\n            <div class=\"CountyName\">{item.COUNTY_NAME}</div>\n          </div>\n        </li>\n      </div>\n    );\n  };\n\n  const filteredCountyList = props.csv.filter(function (item) {\n    return item.STATE_NAME === clickedState;\n  });\n\n  const filteredCountyOptions = filteredCountyList.map((item) => {\n    return { value: item.COUNTY_NAME, label: item.COUNTY_NAME };\n  });\n\n  console.log(filteredCountyOptions);\n  //select county\n  const [selectedOption, setSelectedOption] = useState(null);\n\n  useEffect(() => {\n    console.log(\"disease changed!!!\");\n    console.log(selectedOption);\n    console.log(\"------\");\n    if (selectedOption) {\n      let disease_prevalence = selectedOption.value.concat(\"_prevalence\");\n      // setChosenDisease(disease_prevalence);\n    }\n  }, [selectedOption]);\n\n  const CountyDropdown = () => {\n    return (\n      <div>\n        <Select\n          options={filteredCountyOptions}\n          value={selectedOption}\n          placeholder={\"Select a County\"}\n          clearable={false}\n          // style={styles.select}\n\n          onChange={setSelectedOption}\n        //\n        >\n          {/* {diseaselist.map((choice) => (\n            <option key={choice}>{choice}</option>\n          ))} */}\n        </Select>\n      </div>\n    );\n  };\n\n  const CountyPercentageCircle = (data) => {\n    console.log(filteredCountyList);\n    let ChosenCounty = filteredCountyList.filter(function (item) {\n      if (selectedOption) {\n        return item.COUNTY_NAME === selectedOption.value;\n      }\n    });\n    // ChosenCounty = ChosenCounty[0];\n    let percent = \"\";\n    let ChosenCountyName = \" \";\n    if (ChosenCounty.length != 0) {\n      ChosenCountyName = ChosenCounty[0][\"COUNTY_NAME\"];\n      Array.isArray(props.ChosenDisease)\n        ? (percent = ChosenCounty[0][props.ChosenDisease[0]])\n        : (percent = ChosenCounty[0][props.ChosenDisease]);\n    }\n\n    return (\n      <div>\n        <div>\n          <h2 style={{ textSize: \"12px\" }}></h2>\n        </div>\n        <CircularProgressbarWithChildren\n          styles={buildStyles({ textSize: \"16px\", pathColor: \"#990000\" })}\n          value={percent}\n        // text={`${percent}%`}\n        >\n          <div\n            style={{\n              fontSize: 20,\n              width: \"70%\",\n              marginTop: -5,\n              lineHeight: 1.5,\n              justifyContent: \"center\",\n            }}\n          >\n            <center>\n              {props.ChosenDisease} in {ChosenCountyName}\n              <br />\n              <strong style={{ fontsSize: 30 }}>{percent}%</strong>\n            </center>\n          </div>\n        </CircularProgressbarWithChildren>\n      </div>\n    );\n  };\n\n  const CustomizedLabellist_state = (props) => {\n    const { value } = props;\n    console.log(props);\n    return <g>asdf</g>;\n  };\n  const legendGlyphSize = 15;\n  let colorScale = scaleQuantile()\n    .domain([\n      0,\n      d3.max(props.csv, function (d) {\n        // console.log(d.Obesity_prevalence);\n        return d[props.ChosenDisease].toFixed(0);\n      }),\n    ])\n    .range([\n      \"#fff7ec\",\n      \"#fee8c8\",\n      \"#fdd49e\",\n      \"#fdbb84\",\n      \"#fc8d59\",\n      \"#ef6548\",\n      \"#d7301f\",\n      \"#990000\",\n    ]);\n  if (colourScale) {\n    console.log(colourScale);\n    return (\n      <div>\n        <Grid columns={3} divided>\n          <Grid.Row>\n            <Grid.Column width={2}>\n              <div class=\"CountyList\">\n                {\" \"}\n                <CountyList list={filteredCountyList} id=\"growth\" />\n              </div>\n            </Grid.Column>\n            {/* <svg class='legend'></svg> */}\n\n            <Grid.Column width={10}>\n              <h1>\n                {props.ChosenDisease} in {clickedState}\n              </h1>\n              <div>\n                <div\n                  style={{\n                    width: \"100%\",\n                    display: \"flex\",\n                    justifyContent: \"center\",\n                    fontSize: \"14px\",\n                  }}\n                >\n                  {\" \"}\n                  <LegendQuantile scale={colorScale}>\n                    {(labels) =>\n                      labels.map((label, i) => (\n                        <LegendItem key={`legend-${i}`}>\n                          <svg\n                            width={legendGlyphSize}\n                            height={legendGlyphSize}\n                            style={{ margin: \"2px 0\" }}\n                          >\n                            <circle\n                              fill={label.value}\n                              r={legendGlyphSize / 2}\n                              cx={legendGlyphSize / 2}\n                              cy={legendGlyphSize / 2}\n                            />\n                          </svg>\n                          <LegendLabel align=\"left\" margin=\"0 4px\">\n                            {label.text}\n                          </LegendLabel>\n                        </LegendItem>\n                      ))\n                    }\n                  </LegendQuantile>\n                </div>\n              </div>\n              <div>\n                <ComposableMap\n                  data-tip\n                  data-for=\"states\"\n                  projection=\"geoAlbersUsa\"\n                >\n                  <ZoomableGroup>\n                    <Geographies geography={geoUrl}>\n                      {({ geographies }) =>\n                        geographies.map((geo) => {\n                          {\n                            /* const cur = props.csv.find(s => s['COUNTY_NAME'] === geo.properties.name); */\n                          }\n                          return (\n                            <Geography\n                              key={geo.rsmKey}\n                              geography={geo}\n                              onClick={() => {\n                                const fip = geo.id.substring(0, 2);\n                                const cur = props.csv.find(\n                                  (s) => s[\"STATE_FIPS\"] + \"\" === fip\n                                );\n                                setStateClickedState(cur[\"STATE_NAME\"]);\n                                setClickedfips(fip);\n                                setClicked(true);\n                              }}\n                              onMouseEnter={() => {\n                                const fip = geo.id.substring(0, 2);\n                                const cur = props.csv.find(\n                                  (s) => s[\"STATE_FIPS\"] + \"\" === fip\n                                );\n                                setStatefips(fip);\n                                console.log(fip);\n                                console.log(cur);\n                                setStateName(cur[\"STATE_NAME\"]);\n                              }}\n                              onMouseLeave={() => {\n                                setStatefips(\"_nation\");\n                                setStateName(\"the United States\");\n                              }}\n                              style={{\n                                default: {\n                                  outline: 'none'\n                                },\n                                hover: {\n                                  outline: 'none'\n                                },\n                                pressed: {\n                                  outline: 'none'\n                                }\n                              }}\n                              fill={\n                                geo.id.substring(0, 2) === statefips\n                                  ? \"yellow\"\n                                  : colourScale[geo.properties.name]\n                                    ? colourScale[geo.properties.name]\n                                    : \"#EEE\"\n                              }\n                            />\n                          );\n                        })\n                      }\n                    </Geographies>\n                  </ZoomableGroup>\n                </ComposableMap>\n                <ReactTooltip id=\"states\">\n                  <font size=\"20px\">\n                    <b>{statename}</b>{\" \"}\n                  </font>\n                  <br />\n                  <b>Click for data about the counties .</b>\n                </ReactTooltip>\n              </div>\n\n            </Grid.Column>\n            <Grid.Column width={4}>\n            <Table celled fixed style={{ width: \"90%\" }}>\n            <Table.Header>\n\n            <tr textalign=\"center\" colSpan=\"3\"\n            style={{ backgroundColor: '#94B3FD'}}\n            >\n            <td colSpan='1' style={{ fontSize: '14px', textAlign: \"center\", fontWeight: 700, color: \"black\"  }}>Disease Total Counts </td>\n            <td colSpan='1' style={{  fontSize: '14px', textAlign: \"center\", fontWeight: 700, color: \"black\" }}> {clicked?clickedState: \"\"}</td>\n            <td colSpan='1' style={{  fontSize: '14px', textAlign: \"center\",  fontWeight: 700, color: \"black\" }}> U.S.</td>\n            </tr>\n\n\n            <Table.Row textAlign='center'>\n            <Table.HeaderCell style={{ fontSize: '14px', fontWeight: 700 }}> {\"Obesity\"} </Table.HeaderCell>\n            <Table.HeaderCell style={{ fontSize: '14px', fontWeight: 700 }}> {clicked?statedic[clickedfips]['Obesity_number']: <div></div>} </Table.HeaderCell>\n            <Table.HeaderCell style={{ fontSize: '14px', fontWeight: 700 }}> {nationdic[0]['Obesity_number']} </Table.HeaderCell>\n\n            </Table.Row>\n            <Table.Row textAlign='center'>\n            <Table.HeaderCell style={{ fontSize: '14px', fontWeight: 700 }}> {\"CKD\"} </Table.HeaderCell>\n            <Table.HeaderCell style={{ fontSize: '14px', fontWeight: 700 }}> {clicked?statedic[clickedfips]['CKD_number']: <div></div>}  </Table.HeaderCell>\n            <Table.HeaderCell style={{ fontSize: '14px', fontWeight: 700 }}> {nationdic[0]['CKD_number']} </Table.HeaderCell>\n\n            </Table.Row>\n            <Table.Row textAlign='center'>\n            <Table.HeaderCell style={{ fontSize: '14px', fontWeight: 700 }}> {\"COPD\"} </Table.HeaderCell>\n            <Table.HeaderCell style={{ fontSize: '14px', fontWeight: 700 }}> {clicked?statedic[clickedfips]['COPD_number']: <div></div>}  </Table.HeaderCell>\n            <Table.HeaderCell style={{ fontSize: '14px', fontWeight: 700 }}> {nationdic[0]['COPD_number']} </Table.HeaderCell>\n\n            </Table.Row>\n            <Table.Row textAlign='center'>\n            <Table.HeaderCell style={{ fontSize: '14px', fontWeight: 700 }}> {\"Heart Disease \"} </Table.HeaderCell>\n            <Table.HeaderCell style={{ fontSize: '14px', fontWeight: 700 }}> {clicked?statedic[clickedfips]['Heart disease_number']: <div></div>}  </Table.HeaderCell>\n            <Table.HeaderCell style={{ fontSize: '14px', fontWeight: 700 }}> {nationdic[0]['Heart disease_number']} </Table.HeaderCell>\n\n            </Table.Row>\n            <Table.Row textAlign='center'>\n            <Table.HeaderCell style={{ fontSize: '14px', fontWeight: 700 }}> {\"Diabetes \"} </Table.HeaderCell>\n            <Table.HeaderCell style={{ fontSize: '14px', fontWeight: 700 }}> {clicked?statedic[clickedfips]['diabetes_number']: <div></div>}  </Table.HeaderCell>\n            <Table.HeaderCell style={{ fontSize: '14px', fontWeight: 700 }}> {nationdic[0]['diabetes_number']} </Table.HeaderCell>\n\n            </Table.Row>\n\n          {/* <Table.Row textAlign = 'center'>\n                                  <Table.HeaderCell style={{fontSize: '19px'}}> {\"Moderna Vaccine\"} </Table.HeaderCell>\n                                  <Table.HeaderCell style={{fontSize: '19px'}}> {numberWithCommas(vaccineData[\"_nation\"][\"Administered_Moderna\"])} </Table.HeaderCell>\n                                  <Table.HeaderCell style={{fontSize: '19px'}}> {numberWithCommas(vaccineData[stateMapFips][\"Administered_Moderna\"])} </Table.HeaderCell>\n\n                                </Table.Row>\n                                <Table.Row textAlign = 'center'>\n                                  <Table.HeaderCell style={{fontSize: '19px'}}> {\"Pfizer \\n \\n Vaccine\"} </Table.HeaderCell>\n                                  <Table.HeaderCell style={{fontSize: '19px'}}> {numberWithCommas(vaccineData[\"_nation\"][\"Administered_Pfizer\"])} </Table.HeaderCell>\n                                  <Table.HeaderCell style={{fontSize: '19px'}}> {numberWithCommas(vaccineData[stateMapFips][\"Administered_Pfizer\"])} </Table.HeaderCell>\n\n                                </Table.Row> */}\n\n\n            </Table.Header>\n            </Table>\n          <div style={{width:\"90%\"}} >\n            <CountyDropdown />\n            <CountyPercentageCircle   data={props.csv} />\n            </div>\n</Grid.Column>\n          </Grid.Row>\n          <Grid.Row>\n            <Grid.Column width={2}>\n\n            </Grid.Column>\n            <Grid.Column width={12}>\n              <div>\n                {clicked ? <CBar statename={clickedState} disease={props.ChosenDisease} fip={clickedfips} data={props.csv} /> : <div></div>}\n              </div>\n            </Grid.Column>\n\n          </Grid.Row>\n        </Grid>\n      </div>\n    );\n  } else {\n    return <p> Please enable Javascript</p>;\n  }\n}\nexport default Mapo;\n","import React, { useEffect, useState } from \"react\";\nimport { Grid, Image } from \"semantic-ui-react\";\nimport BarChartData from \"./components/BarChartData\";\nimport data from \"./customgeo.json\";\nimport USMap from \"./components/USMap.js\";\nimport Map from \"./components/Map.js\";\nimport \"./App.css\";\nimport { Dropdown } from \"semantic-ui-react\";\n// import dataus from \"./us-county-boundaries.json\";\nimport datageo from \"./components/usmap.json\";\nimport Mapo from \"./components/maps.js\";\nimport ReactLoading from \"react-loading\";\nimport csv from \"./convertcsv.json\";\nimport Dropdownbutton from \"./components/MapDropdown\";\nimport Select from \"react-select\";\nfunction App() {\n  const diseaselist = [\"Obesity\", \"Heart disease\", \"COPD\", \"diabetes\", \"CKD\"];\n  // const diseaseList = [\n  //   { key: \"Obesity\", text: \"Obesity\", value: \"Obesity\" },\n  //   { key: \"Heart disease\", text: \"Heart disease\", value: \"Heart disease\" },\n  //   { key: \"COPD\", text: \"COPD\", value: \"COPD\" },\n  //   { key: \"diabetes\", text: \"diabetes\", value: \"diabetes\" },\n  //   { key: \"CKD\", text: \"CKD\", value: \"CKD\" },\n  // ];\n\n  const [ChosenDisease, setChosenDisease] = useState([\"anycondition_prevalence\"]);\n  const [selectedOption, setSelectedOption] = useState(null);\n\n  const handleChoiceChange = (e) => {\n    // setSelectedOption;\n    let disease_prevalence = e.concat(\"_prevalence\");\n    console.log(disease_prevalence);\n    setChosenDisease(disease_prevalence);\n  };\n\n  const options = [\n    { value: \"anycondition\", label: \"Any Condition\" },\n    { value: \"Obesity\", label: \"Obesity\" },\n    { value: \"Heart disease\", label: \"Heart Disease\" },\n    { value: \"COPD\", label: \"COPD\" },\n    { value: \"diabetes\", label: \"Diabetes\" },\n    { value: \"CKD\", label: \"CKD\" },\n  ];\n\n  useEffect(() => {\n    console.log(\"disease changed!!!\");\n    console.log(selectedOption);\n    console.log(\"------\");\n    if (selectedOption) {\n      let disease_prevalence = selectedOption.value.concat(\"_prevalence\");\n      setChosenDisease(disease_prevalence);\n    }\n  }, [selectedOption]);\n\n  const DropdownButton = () => {\n    const styles = {\n      fontSize: 50,\n      // color: \"blue\",\n    };\n    return (\n      <div>\n        <Select\n          options={options}\n          value={selectedOption}\n          placeholder={\"Select a disease\"}\n          clearable={false}\n          style={styles.select}\n          // style={styles.select}\n          onChange={setSelectedOption}\n          //\n        >\n          {console.log(\"---------------------\")}\n          {console.log(selectedOption)}\n          {/* {diseaselist.map((choice) => (\n            <option key={choice}>{choice}</option>\n          ))} */}\n        </Select>\n      </div>\n    );\n  };\n\n  const DropdownButtonCounty = () => {\n    return (\n      // <Dropdown\n      //   placeholder=\"Select Disease\"\n      //   fluid\n      //   selection\n      //   options={diseaseList}\n      //   onChange={handleChoiceChange}\n      // />\n      <div>\n        <Select\n          options={options}\n          value={selectedOption}\n          placeholder={\"Select a disease\"}\n          clearable={false}\n          // style={styles.select}\n          onChange={setSelectedOption}\n          //\n        >\n          {console.log(\"---------------------\")}\n          {console.log(selectedOption)}\n          {/* {diseaselist.map((choice) => (\n            <option key={choice}>{choice}</option>\n          ))} */}\n        </Select>\n      </div>\n    );\n  };\n\n  const [statesData, setStateData] = useState([]);\n  const [property, setProperty] = useState(\"pop_est\");\n  useEffect(() => {\n    (async () => {\n      const res = await fetch(datageo);\n      const statesData = await res.json();\n      // Set the statesData with the data received from fetch().\n      setStateData(statesData);\n    })();\n  }, []);\n  if (statesData) {\n    return (\n      <div>\n        <Grid divided>\n          <Grid.Row>\n            <Grid.Column>\n              <div class=\"DropdownToggle\">\n                <DropdownButton />\n              </div>\n              {/* <USMap data={data} property={property} /> */}\n              <Mapo data={datageo} csv={csv} ChosenDisease={ChosenDisease} />\n            </Grid.Column>\n            {/* <Grid.Column style={{ marginTop: \"4%\" }} width={6}>\n              <DropdownButton />\n            </Grid.Column> */}\n          </Grid.Row>\n        </Grid>\n      </div>\n    );\n  } else {\n    return <ReactLoading />;\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nconst styleLink = document.createElement(\"link\");\nstyleLink.rel = \"stylesheet\";\nstyleLink.href =\n  \"https://cdn.jsdelivr.net/npm/semantic-ui/dist/semantic.min.css\";\ndocument.head.appendChild(styleLink);\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}