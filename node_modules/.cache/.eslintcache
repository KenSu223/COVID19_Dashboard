[{"C:\\Users\\Henry\\Documents\\GitHub\\kenry\\src\\index.js":"1","C:\\Users\\Henry\\Documents\\GitHub\\kenry\\src\\serviceWorker.js":"2","C:\\Users\\Henry\\Documents\\GitHub\\kenry\\src\\App.js":"3","C:\\Users\\Henry\\Documents\\GitHub\\kenry\\src\\components\\Map.js":"4","C:\\Users\\Henry\\Documents\\GitHub\\kenry\\src\\components\\USMap.js":"5","C:\\Users\\Henry\\Documents\\GitHub\\kenry\\src\\components\\maps.js":"6","C:\\Users\\Henry\\Documents\\GitHub\\kenry\\src\\components\\BarChartData.js":"7","C:\\Users\\Henry\\Documents\\GitHub\\kenry\\src\\components\\useResizeObserver.js":"8","C:\\Users\\Henry\\Documents\\GitHub\\kenry\\src\\components\\BarChart.js":"9","C:\\Users\\Henry\\Documents\\GitHub\\kenry\\src\\components\\MapDropdown.js":"10"},{"size":674,"mtime":1638227337089,"results":"11","hashOfConfig":"12"},{"size":5086,"mtime":1637626724225,"results":"13","hashOfConfig":"12"},{"size":3855,"mtime":1638312219193,"results":"14","hashOfConfig":"12"},{"size":1615,"mtime":1638215180587,"results":"15","hashOfConfig":"12"},{"size":2648,"mtime":1637696281912,"results":"16","hashOfConfig":"12"},{"size":3195,"mtime":1638303000172,"results":"17","hashOfConfig":"12"},{"size":1077,"mtime":1637626724217,"results":"18","hashOfConfig":"12"},{"size":718,"mtime":1637626724219,"results":"19","hashOfConfig":"12"},{"size":2506,"mtime":1637626724217,"results":"20","hashOfConfig":"12"},{"size":1359,"mtime":1638299710070,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"1e2wxxh",{"filePath":"25","messages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"27","messages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"29","messages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"24"},{"filePath":"32","messages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"24"},{"filePath":"35","messages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"24"},{"filePath":"38","messages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"40","messages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"42","messages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"44","messages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"24"},"C:\\Users\\Henry\\Documents\\GitHub\\kenry\\src\\index.js",[],["47","48"],"C:\\Users\\Henry\\Documents\\GitHub\\kenry\\src\\serviceWorker.js",[],"C:\\Users\\Henry\\Documents\\GitHub\\kenry\\src\\App.js",["49","50","51","52","53","54","55","56","57","58","59"],"C:\\Users\\Henry\\Documents\\GitHub\\kenry\\src\\components\\Map.js",["60","61","62"],"import React, { useRef, useEffect, useState } from \"react\";\r\nimport * as d3 from 'd3'\r\n\r\nfunction Map (props)  {\r\n   \r\n    //////////////////////////////////////////////////////\r\n    // REFs\r\n    //////////////////////////////////////////////////////\r\n    console.log(props.data);\r\n    const svgRef = useRef();\r\n    const projRef = useRef(d3.geoMercator().center([-73.93, 40.72]).scale(57500));\r\n    const pathRef = useRef()\r\n    useEffect(() => {\r\n        // GRAB CURRENT WIDTH/HEIGHT OF DIV ID=\"MAP\"\r\n        const height = svgRef.current.clientHeight;\r\n        const width = svgRef.current.clientWidth;\r\n        // FINE TUNE THE POSITION THE MAP WITHING THE ELEMENT\r\n         projRef.current.translate([width  / 2, height  / 2 ]);\r\n    \r\n        // ASSING THE PROJECTION A PROJECTION\r\n        const path = d3.geoPath().projection(projRef.current);\r\n        if (props.data.features.length) {\r\n            console.log(props.data);\r\n          renderChart(props.data.features, path);\r\n        }\r\n     }, [props.data.features]);\r\n\r\n     const renderChart = (data, path) => {\r\n         \r\n        d3.select(svgRef.current).selectAll('path').data(data).enter()\r\n          .append('path')\r\n          .attr('class', (d) => {\r\n              console.log(d);\r\n              return d.properties})\r\n          .attr('d', path)\r\n        //   .style('fill', (d) => boroughLegend(d.properties.borough))\r\n      };\r\n     //////////////////////////////////////////////////////\r\n    return(    \r\n        <svg id=\"boroughs-map\" ref={svgRef}>\r\n        {props.data.features && renderChart()}\r\n      </svg>\r\n    )\r\n }\r\n export default Map;","C:\\Users\\Henry\\Documents\\GitHub\\kenry\\src\\components\\USMap.js",["63","64","65","66","67","68","69"],"import React, { useRef, useEffect, useState } from \"react\";\r\nimport { select, geoPath, geoMercator, min, max, scaleLinear } from \"d3\";\r\nimport useResizeObserver from \"./useResizeObserver\";\r\nimport * as d3 from 'd3'\r\nfunction USMap({data,property}){\r\n        console.log(data);\r\n        const svgRef = useRef();\r\n        const wrapperRef = useRef();\r\n        // const dimensions = useResizeObserver(wrapperRef);\r\n        const [selectedCountry, setSelectedCountry] = useState(null);\r\n        // const dimensions=useResizeObserver(wrapperRef);\r\n        // will be called initially and on every data change\r\n        useEffect(() => {\r\n          const svg = select(svgRef.current);\r\n      \r\n        //   const minProp = min(data.features, feature => feature.properties[property]);\r\n        //   const maxProp = max(data.features, feature => feature.properties[property]);\r\n        //   const colorScale = scaleLinear()\r\n        //     .domain([minProp, maxProp])\r\n        //     .range([\"#ccc\", \"red\"]);\r\n      \r\n          // use resized dimensions\r\n          // but fall back to getBoundingClientRect, if no dimensions yet.\r\n          const { width, height } =\r\n             wrapperRef.current.getBoundingClientRect();\r\n      \r\n          // projects geo-coordinates on a 2D plane\r\n          const projection = geoMercator()\r\n            .fitSize([width, height], selectedCountry || data)\r\n            .precision(100);\r\n      \r\n          // takes geojson data,\r\n          // transforms that into the d attribute of a path element\r\n          const pathGenerator = geoPath().projection(projection);\r\n\r\n        \r\n        // console.log(data.features);\r\n          // render each country\r\n          // svg\r\n          //   .selectAll(\".country\")\r\n          //   .data(data.features)\r\n          //   .join(\"path\")\r\n          //   // .on(\"click\", feature => {\r\n          //   //   setSelectedCountry(selectedCountry === feature ? null : feature);\r\n          //   // })\r\n          //   .attr(\"class\", \"country\")\r\n          //   .transition()\r\n          //   .attr(\"d\", feature => pathGenerator(feature));\r\n      \r\n          // render text\r\n          svg\r\n          .selectAll(\"path\")\r\n          .data(data.features)\r\n          .enter()\r\n          .append('path')\r\n          .classed(\"country\",true)\r\n          .attr(\"d\", feature => pathGenerator(feature))\r\n          .attr('fill','#088')\r\n          .attr('stroke','#000');\r\n         \r\n        }, [data]);\r\n      \r\n        return (\r\n          <div ref={wrapperRef} style={{ marginBottom: \"2rem\" }}>\r\n            <svg ref={svgRef}></svg>\r\n          </div>\r\n        );\r\n      \r\n    }\r\n      export default USMap;\r\n","C:\\Users\\Henry\\Documents\\GitHub\\kenry\\src\\components\\maps.js",["70","71","72","73","74","75","76","77"],"import React, { useRef, useEffect, useState } from \"react\";\r\nimport { select, geoPath, geoMercator, min, max, scaleLinear } from \"d3\";\r\nimport * as d3 from \"d3\";\r\nimport _ from \"lodash\";\r\n\r\nimport { Dropdown } from \"semantic-ui-react\";\r\n\r\nfunction Mapo(props) {\r\n  const [statesData, setStateData] = useState(props.data);\r\n  const [maximum, setMaximum] = useState(0);\r\n  console.log(statesData);\r\n  console.log(props.csv);\r\n  const svgRef = useRef();\r\n  const [colourScale, setColourScale] = useState();\r\n  const pathRef = useRef();\r\n\r\n  useEffect(() => {\r\n    setMaximum(\r\n      d3.max(props.csv, function (d) {\r\n        // console.log(d.Obesity_prevalence);\r\n        //return(d.Obesity_prevalence)\r\n        // console.log(d[props.ChosenDisease]);\r\n        console.log(props.ChosenDisease);\r\n        return d[props.ChosenDisease];\r\n      })\r\n    );\r\n    console.log(maximum);\r\n    let colorScale = scaleLinear()\r\n      .domain([\r\n        0,\r\n        d3.max(props.csv, function (d) {\r\n          // console.log(d.Obesity_prevalence);\r\n          return d[props.ChosenDisease];\r\n        }),\r\n      ])\r\n      .range([255, 0]);\r\n    const svg = select(svgRef.current);\r\n    console.log(colorScale(34.4));\r\n    let scales = {};\r\n    _.each(props.csv, (d) => {\r\n      scales[d[\"STATE_NAME\"]] = colorScale(d[props.ChosenDisease]);\r\n    });\r\n    console.log(scales);\r\n    setColourScale(scales);\r\n    console.log(colourScale);\r\n    //  svg.selectAll('path').data(props.csv).enter().attr(\"fill\",function(d){\r\n    //    console.log(d.Obesity_prevalence);\r\n    //    var f=colorScale(d.Obesity_prevalence);\r\n    //    if(f<=25.5){\r\n    //     return \"rgb(\" + 255 + \",0,0)\";\r\n    //    }\r\n    //    else{\r\n    //    return \"rgb(\" + f + \",\" + f + \",\" + f + \")\"};\r\n    //  })\r\n  }, [props.ChosenDisease]);\r\n  if (colourScale) {\r\n    console.log(colourScale);\r\n    return (\r\n      <svg ref={svgRef} viewBox=\"0 0 960 600\">\r\n        {statesData.map((stateData, index) => {\r\n          console.log(colourScale[stateData.name]);\r\n          return (\r\n            <path\r\n              style={{\r\n                cursor: \"pointer\",\r\n                fill: colourScale[stateData.name]\r\n                  ? \"rgb(\" +\r\n                    colourScale[stateData.name] +\r\n                    \",\" +\r\n                    0 +\r\n                    \",\" +\r\n                    0 +\r\n                    \")\"\r\n                  : \"white\",\r\n              }}\r\n              key={index}\r\n              ref={pathRef}\r\n              stroke=\"black\"\r\n              strokeWidth=\"5px\"\r\n              d={stateData.shape}\r\n              onMouseOver={(event) => {\r\n                event.target.style.fill = \"blue\";\r\n              }}\r\n              onMouseOut={(event) => {\r\n                event.target.style.fill = colourScale[stateData.name]\r\n                  ? \"rgb(\" +\r\n                    colourScale[stateData.name] +\r\n                    \",\" +\r\n                    0 +\r\n                    \",\" +\r\n                    0 +\r\n                    \")\"\r\n                  : \"white\";\r\n              }}\r\n            ></path>\r\n          );\r\n        })}\r\n      </svg>\r\n    );\r\n  } else {\r\n    return <p>Hello World</p>;\r\n  }\r\n}\r\nexport default Mapo;\r\n","C:\\Users\\Henry\\Documents\\GitHub\\kenry\\src\\components\\BarChartData.js",[],"C:\\Users\\Henry\\Documents\\GitHub\\kenry\\src\\components\\useResizeObserver.js",[],"C:\\Users\\Henry\\Documents\\GitHub\\kenry\\src\\components\\BarChart.js",[],"C:\\Users\\Henry\\Documents\\GitHub\\kenry\\src\\components\\MapDropdown.js",["78","79","80","81"],"import DropdownButton from \"react-bootstrap/DropdownButton\";\r\n// import Dropdown from \"react-bootstrap/Dropdown\";\r\nimport { Dropdown } from \"semantic-ui-react\";\r\nimport React, { useRef, useEffect, useState } from \"react\";\r\n\r\nconst diseaseList = [\r\n  { key: \"Obesity\", text: \"Obesity\", value: \"Obesity\" },\r\n  { key: \"Heart Disease\", text: \"Heart Disease\", value: \"Heart Disease\" },\r\n  { key: \"COPD\", text: \"COPD\", value: \"COPD\" },\r\n  { key: \"Diabetes\", text: \"Diabetes\", value: \"Diabetes\" },\r\n  { key: \"CKD\", text: \"CKD\", value: \"CKD\" },\r\n];\r\n\r\n// const DropdownExampleSelection = () => (\r\n//   <Dropdown\r\n//     placeholder=\"Select Friend\"\r\n//     fluid\r\n//     selection\r\n//     options={friendOptions}\r\n//   />\r\n// );\r\n\r\n// export default DropdownExampleSelection;\r\n\r\nconst DropdownSelection = () => {\r\n  //   const [DiseaseChoice, setDiseaseChoice] = useState([\r\n  //     \"Obesity\",\r\n  //     \"Heart Disease\",\r\n  //     \"COPD\",\r\n  //     \"Diabetes\",\r\n  //     \"CKD\",\r\n  //   ]);\r\n  const [ChosenDisease, setChosenDisease] = useState([\"Obesity\"]);\r\n\r\n  const handleChoiceChange = (event, data) => {\r\n    setChosenDisease(data.value);\r\n  };\r\n\r\n  return (\r\n    <Dropdown\r\n      placeholder=\"Select Disease\"\r\n      fluid\r\n      selection\r\n      options={diseaseList}\r\n      onChange={handleChoiceChange}\r\n    />\r\n  );\r\n};\r\n\r\nexport default DropdownSelection;\r\n",{"ruleId":"82","replacedBy":"83"},{"ruleId":"84","replacedBy":"85"},{"ruleId":"86","severity":1,"message":"87","line":2,"column":16,"nodeType":"88","messageId":"89","endLine":2,"endColumn":21},{"ruleId":"86","severity":1,"message":"90","line":3,"column":8,"nodeType":"88","messageId":"89","endLine":3,"endColumn":20},{"ruleId":"86","severity":1,"message":"91","line":4,"column":8,"nodeType":"88","messageId":"89","endLine":4,"endColumn":12},{"ruleId":"86","severity":1,"message":"92","line":5,"column":8,"nodeType":"88","messageId":"89","endLine":5,"endColumn":13},{"ruleId":"86","severity":1,"message":"93","line":6,"column":8,"nodeType":"88","messageId":"89","endLine":6,"endColumn":11},{"ruleId":"86","severity":1,"message":"94","line":8,"column":10,"nodeType":"88","messageId":"89","endLine":8,"endColumn":18},{"ruleId":"86","severity":1,"message":"95","line":14,"column":8,"nodeType":"88","messageId":"89","endLine":14,"endColumn":22},{"ruleId":"86","severity":1,"message":"96","line":17,"column":9,"nodeType":"88","messageId":"89","endLine":17,"endColumn":20},{"ruleId":"86","severity":1,"message":"97","line":29,"column":9,"nodeType":"88","messageId":"89","endLine":29,"endColumn":27},{"ruleId":"86","severity":1,"message":"98","line":89,"column":10,"nodeType":"88","messageId":"89","endLine":89,"endColumn":18},{"ruleId":"86","severity":1,"message":"99","line":89,"column":20,"nodeType":"88","messageId":"89","endLine":89,"endColumn":31},{"ruleId":"86","severity":1,"message":"100","line":1,"column":36,"nodeType":"88","messageId":"89","endLine":1,"endColumn":44},{"ruleId":"86","severity":1,"message":"101","line":12,"column":11,"nodeType":"88","messageId":"89","endLine":12,"endColumn":18},{"ruleId":"102","severity":1,"message":"103","line":26,"column":9,"nodeType":"104","endLine":26,"endColumn":30,"suggestions":"105"},{"ruleId":"86","severity":1,"message":"106","line":2,"column":40,"nodeType":"88","messageId":"89","endLine":2,"endColumn":43},{"ruleId":"86","severity":1,"message":"107","line":2,"column":45,"nodeType":"88","messageId":"89","endLine":2,"endColumn":48},{"ruleId":"86","severity":1,"message":"108","line":2,"column":50,"nodeType":"88","messageId":"89","endLine":2,"endColumn":61},{"ruleId":"86","severity":1,"message":"109","line":3,"column":8,"nodeType":"88","messageId":"89","endLine":3,"endColumn":25},{"ruleId":"86","severity":1,"message":"110","line":4,"column":13,"nodeType":"88","messageId":"89","endLine":4,"endColumn":15},{"ruleId":"86","severity":1,"message":"111","line":10,"column":33,"nodeType":"88","messageId":"89","endLine":10,"endColumn":51},{"ruleId":"102","severity":1,"message":"112","line":61,"column":12,"nodeType":"104","endLine":61,"endColumn":18,"suggestions":"113"},{"ruleId":"86","severity":1,"message":"114","line":2,"column":18,"nodeType":"88","messageId":"89","endLine":2,"endColumn":25},{"ruleId":"86","severity":1,"message":"115","line":2,"column":27,"nodeType":"88","messageId":"89","endLine":2,"endColumn":38},{"ruleId":"86","severity":1,"message":"106","line":2,"column":40,"nodeType":"88","messageId":"89","endLine":2,"endColumn":43},{"ruleId":"86","severity":1,"message":"107","line":2,"column":45,"nodeType":"88","messageId":"89","endLine":2,"endColumn":48},{"ruleId":"86","severity":1,"message":"94","line":6,"column":10,"nodeType":"88","messageId":"89","endLine":6,"endColumn":18},{"ruleId":"86","severity":1,"message":"116","line":9,"column":22,"nodeType":"88","messageId":"89","endLine":9,"endColumn":34},{"ruleId":"86","severity":1,"message":"117","line":37,"column":11,"nodeType":"88","messageId":"89","endLine":37,"endColumn":14},{"ruleId":"102","severity":1,"message":"118","line":55,"column":6,"nodeType":"104","endLine":55,"endColumn":27,"suggestions":"119"},{"ruleId":"86","severity":1,"message":"120","line":1,"column":8,"nodeType":"88","messageId":"89","endLine":1,"endColumn":22},{"ruleId":"86","severity":1,"message":"121","line":4,"column":17,"nodeType":"88","messageId":"89","endLine":4,"endColumn":23},{"ruleId":"86","severity":1,"message":"122","line":4,"column":25,"nodeType":"88","messageId":"89","endLine":4,"endColumn":34},{"ruleId":"86","severity":1,"message":"123","line":33,"column":10,"nodeType":"88","messageId":"89","endLine":33,"endColumn":23},"no-native-reassign",["124"],"no-negated-in-lhs",["125"],"no-unused-vars","'Image' is defined but never used.","Identifier","unusedVar","'BarChartData' is defined but never used.","'data' is defined but never used.","'USMap' is defined but never used.","'Map' is defined but never used.","'Dropdown' is defined but never used.","'Dropdownbutton' is defined but never used.","'diseaselist' is assigned a value but never used.","'handleChoiceChange' is assigned a value but never used.","'property' is assigned a value but never used.","'setProperty' is assigned a value but never used.","'useState' is defined but never used.","'pathRef' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'props.data'. Either include it or remove the dependency array.","ArrayExpression",["126"],"'min' is defined but never used.","'max' is defined but never used.","'scaleLinear' is defined but never used.","'useResizeObserver' is defined but never used.","'d3' is defined but never used.","'setSelectedCountry' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'selectedCountry'. Either include it or remove the dependency array.",["127"],"'geoPath' is defined but never used.","'geoMercator' is defined but never used.","'setStateData' is assigned a value but never used.","'svg' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'colourScale', 'maximum', and 'props.csv'. Either include them or remove the dependency array. If 'setMaximum' needs the current value of 'props.csv', you can also switch to useReducer instead of useState and read 'props.csv' in the reducer.",["128"],"'DropdownButton' is defined but never used.","'useRef' is defined but never used.","'useEffect' is defined but never used.","'ChosenDisease' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"129","fix":"130"},{"desc":"131","fix":"132"},{"desc":"133","fix":"134"},"Update the dependencies array to be: [props.data, props.data.features]",{"range":"135","text":"136"},"Update the dependencies array to be: [data, selectedCountry]",{"range":"137","text":"138"},"Update the dependencies array to be: [colourScale, maximum, props.ChosenDisease, props.csv]",{"range":"139","text":"140"},[1003,1024],"[props.data, props.data.features]",[2433,2439],"[data, selectedCountry]",[1767,1788],"[colourScale, maximum, props.ChosenDisease, props.csv]"]