{"ast":null,"code":"function dogroup(values, keyof) {\n  const map = new Map();\n  let index = -1;\n\n  for (const value of values) {\n    const key = keyof(value, ++index, values);\n    const group = map.get(key);\n    if (group) group.push(value);else map.set(key, [value]);\n  }\n\n  return map;\n}\n\nexport default function rollup(values, reduce) {\n  for (var _len = arguments.length, keys = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n    keys[_key - 2] = arguments[_key];\n  }\n\n  return function regroup(values, i) {\n    if (i >= keys.length) return reduce(values);\n    const map = dogroup(values, keys[i]);\n    return new Map(Array.from(map, _ref => {\n      let [k, v] = _ref;\n      return [k, regroup(v, i + 1)];\n    }));\n  }(values, 0);\n}","map":{"version":3,"sources":["/Users/Kevin/Desktop/program/cs 485/cdc dataset/node_modules/d3-array/src/rollup.js"],"names":["dogroup","values","keyof","map","Map","index","value","key","group","get","push","set","rollup","reduce","keys","regroup","i","length","Array","from","k","v"],"mappings":"AAAA,SAASA,OAAT,CAAiBC,MAAjB,EAAyBC,KAAzB,EAAgC;AAC9B,QAAMC,GAAG,GAAG,IAAIC,GAAJ,EAAZ;AACA,MAAIC,KAAK,GAAG,CAAC,CAAb;;AACA,OAAK,MAAMC,KAAX,IAAoBL,MAApB,EAA4B;AAC1B,UAAMM,GAAG,GAAGL,KAAK,CAACI,KAAD,EAAQ,EAAED,KAAV,EAAiBJ,MAAjB,CAAjB;AACA,UAAMO,KAAK,GAAGL,GAAG,CAACM,GAAJ,CAAQF,GAAR,CAAd;AACA,QAAIC,KAAJ,EAAWA,KAAK,CAACE,IAAN,CAAWJ,KAAX,EAAX,KACKH,GAAG,CAACQ,GAAJ,CAAQJ,GAAR,EAAa,CAACD,KAAD,CAAb;AACN;;AACD,SAAOH,GAAP;AACD;;AAED,eAAe,SAASS,MAAT,CAAgBX,MAAhB,EAAwBY,MAAxB,EAAyC;AAAA,oCAANC,IAAM;AAANA,IAAAA,IAAM;AAAA;;AACtD,SAAQ,SAASC,OAAT,CAAiBd,MAAjB,EAAyBe,CAAzB,EAA4B;AAClC,QAAIA,CAAC,IAAIF,IAAI,CAACG,MAAd,EAAsB,OAAOJ,MAAM,CAACZ,MAAD,CAAb;AACtB,UAAME,GAAG,GAAGH,OAAO,CAACC,MAAD,EAASa,IAAI,CAACE,CAAD,CAAb,CAAnB;AACA,WAAO,IAAIZ,GAAJ,CAAQc,KAAK,CAACC,IAAN,CAAWhB,GAAX,EAAgB;AAAA,UAAC,CAACiB,CAAD,EAAIC,CAAJ,CAAD;AAAA,aAAY,CAACD,CAAD,EAAIL,OAAO,CAACM,CAAD,EAAIL,CAAC,GAAG,CAAR,CAAX,CAAZ;AAAA,KAAhB,CAAR,CAAP;AACD,GAJM,CAIJf,MAJI,EAII,CAJJ,CAAP;AAKD","sourcesContent":["function dogroup(values, keyof) {\n  const map = new Map();\n  let index = -1;\n  for (const value of values) {\n    const key = keyof(value, ++index, values);\n    const group = map.get(key);\n    if (group) group.push(value);\n    else map.set(key, [value]);\n  }\n  return map;\n}\n\nexport default function rollup(values, reduce, ...keys) {\n  return (function regroup(values, i) {\n    if (i >= keys.length) return reduce(values);\n    const map = dogroup(values, keys[i]);\n    return new Map(Array.from(map, ([k, v]) => [k, regroup(v, i + 1)]));\n  })(values, 0);\n}\n"]},"metadata":{},"sourceType":"module"}