{"ast":null,"code":"var _jsxFileName = \"/Users/Kevin/Desktop/program/cs 485/cdc dataset/src/components/BarChartData.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { csv } from 'd3-fetch';\nimport { ascending } from 'd3-array';\nimport BarChart from './BarChart';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst parseNA = string => string === 'NA' ? undefined : string;\n\nfunction type(d) {\n  return {\n    genre: parseNA(d.genre),\n    revenue: +d.revenue\n  };\n}\n\nfunction filterData(data) {\n  return data.filter(d => {\n    return d.revenue > 0;\n  });\n}\n\nfunction prepareBarChartData(data) {\n  // usually more wrangling is required but the example data is simple\n  return data;\n}\n\nconst BarChartData = () => {\n  _s();\n\n  const [barChartData, setBarChartData] = useState(null);\n  useEffect(() => {\n    csv('/static/data/barchart.csv', type).then(data => {\n      const dataClean = filterData(data);\n      setBarChartData(prepareBarChartData(dataClean).sort((a, b) => {\n        return ascending(a.genre, b.genre);\n      }));\n    });\n  }, []);\n\n  if (barChartData === null) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 12\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(BarChart, {\n    data: barChartData\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 10\n  }, this);\n};\n\n_s(BarChartData, \"3fpgLZjcbr61SC0dnusf96Qar3M=\");\n\n_c = BarChartData;\nexport default BarChartData;\n\nvar _c;\n\n$RefreshReg$(_c, \"BarChartData\");","map":{"version":3,"sources":["/Users/Kevin/Desktop/program/cs 485/cdc dataset/src/components/BarChartData.js"],"names":["React","useState","useEffect","csv","ascending","BarChart","parseNA","string","undefined","type","d","genre","revenue","filterData","data","filter","prepareBarChartData","BarChartData","barChartData","setBarChartData","then","dataClean","sort","a","b"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,GAAT,QAAoB,UAApB;AACA,SAASC,SAAT,QAA0B,UAA1B;AACA,OAAOC,QAAP,MAAqB,YAArB;;;AAEA,MAAMC,OAAO,GAAGC,MAAM,IAAKA,MAAM,KAAK,IAAX,GAAkBC,SAAlB,GAA8BD,MAAzD;;AAEA,SAASE,IAAT,CAAcC,CAAd,EAAiB;AACf,SAAO;AACLC,IAAAA,KAAK,EAAEL,OAAO,CAACI,CAAC,CAACC,KAAH,CADT;AAELC,IAAAA,OAAO,EAAE,CAACF,CAAC,CAACE;AAFP,GAAP;AAID;;AAED,SAASC,UAAT,CAAoBC,IAApB,EAA0B;AACxB,SAAOA,IAAI,CAACC,MAAL,CAAYL,CAAC,IAAI;AACtB,WAAOA,CAAC,CAACE,OAAF,GAAY,CAAnB;AACD,GAFM,CAAP;AAGD;;AAED,SAASI,mBAAT,CAA6BF,IAA7B,EAAmC;AACjC;AACA,SAAOA,IAAP;AACD;;AAED,MAAMG,YAAY,GAAG,MAAM;AAAA;;AACzB,QAAM,CAACC,YAAD,EAAeC,eAAf,IAAkClB,QAAQ,CAAC,IAAD,CAAhD;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACdC,IAAAA,GAAG,CAAC,2BAAD,EAA8BM,IAA9B,CAAH,CAAuCW,IAAvC,CAA4CN,IAAI,IAAI;AAClD,YAAMO,SAAS,GAAGR,UAAU,CAACC,IAAD,CAA5B;AACAK,MAAAA,eAAe,CACbH,mBAAmB,CAACK,SAAD,CAAnB,CAA+BC,IAA/B,CAAoC,CAACC,CAAD,EAAIC,CAAJ,KAAU;AAC5C,eAAOpB,SAAS,CAACmB,CAAC,CAACZ,KAAH,EAAUa,CAAC,CAACb,KAAZ,CAAhB;AACD,OAFD,CADa,CAAf;AAKD,KAPD;AAQD,GATQ,EASN,EATM,CAAT;;AAWA,MAAIO,YAAY,KAAK,IAArB,EAA2B;AACzB,wBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;AACD;;AAED,sBAAO,QAAC,QAAD;AAAU,IAAA,IAAI,EAAEA;AAAhB;AAAA;AAAA;AAAA;AAAA,UAAP;AACD,CAnBD;;GAAMD,Y;;KAAAA,Y;AAqBN,eAAeA,YAAf","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport { csv } from 'd3-fetch'\nimport { ascending } from 'd3-array'\nimport BarChart from './BarChart'\n\nconst parseNA = string => (string === 'NA' ? undefined : string)\n\nfunction type(d) {\n  return {\n    genre: parseNA(d.genre),\n    revenue: +d.revenue,\n  }\n}\n\nfunction filterData(data) {\n  return data.filter(d => {\n    return d.revenue > 0\n  })\n}\n\nfunction prepareBarChartData(data) {\n  // usually more wrangling is required but the example data is simple\n  return data\n}\n\nconst BarChartData = () => {\n  const [barChartData, setBarChartData] = useState(null)\n\n  useEffect(() => {\n    csv('/static/data/barchart.csv', type).then(data => {\n      const dataClean = filterData(data)\n      setBarChartData(\n        prepareBarChartData(dataClean).sort((a, b) => {\n          return ascending(a.genre, b.genre)\n        }),\n      )\n    })\n  }, [])\n\n  if (barChartData === null) {\n    return <p>Loading...</p>\n  }\n\n  return <BarChart data={barChartData} />\n}\n\nexport default BarChartData\n"]},"metadata":{},"sourceType":"module"}