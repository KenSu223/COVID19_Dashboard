{"ast":null,"code":"var _jsxFileName = \"/Users/Kevin/Desktop/program/cs 485/cdc dataset/src/components/USMap.js\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useEffect } from \"react\";\nimport { select } from \"d3\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction USMap(_ref) {\n  _s();\n\n  let {\n    data,\n    property\n  } = _ref;\n  const svgRef = useRef();\n  const wrapperRef = useRef();\n  const dimensions = useResizeObserver(wrapperRef);\n  const [selectedCountry, setSelectedCountry] = useState(null); // will be called initially and on every data change\n\n  useEffect(() => {\n    const svg = select(svgRef.current);\n    const minProp = min(data.features, feature => feature.properties[property]);\n    const maxProp = max(data.features, feature => feature.properties[property]);\n    const colorScale = scaleLinear().domain([minProp, maxProp]).range([\"#ccc\", \"red\"]); // use resized dimensions\n    // but fall back to getBoundingClientRect, if no dimensions yet.\n\n    const {\n      width,\n      height\n    } = dimensions || wrapperRef.current.getBoundingClientRect(); // projects geo-coordinates on a 2D plane\n\n    const projection = geoMercator().fitSize([width, height], selectedCountry || data).precision(100); // takes geojson data,\n    // transforms that into the d attribute of a path element\n\n    const pathGenerator = geoPath().projection(projection); // render each country\n\n    svg.selectAll(\".country\").data(data.features).join(\"path\").on(\"click\", feature => {\n      setSelectedCountry(selectedCountry === feature ? null : feature);\n    }).attr(\"class\", \"country\").transition().attr(\"fill\", feature => colorScale(feature.properties[property])).attr(\"d\", feature => pathGenerator(feature)); // render text\n\n    svg.selectAll(\".label\").data([selectedCountry]).join(\"text\").attr(\"class\", \"label\").text(feature => feature && feature.properties.name + \": \" + feature.properties[property].toLocaleString()).attr(\"x\", 10).attr(\"y\", 25);\n  }, [data, dimensions, property, selectedCountry]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: wrapperRef,\n    style: {\n      marginBottom: \"2rem\"\n    },\n    children: /*#__PURE__*/_jsxDEV(\"svg\", {\n      ref: svgRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 11\n  }, this);\n}\n\n_s(USMap, \"1uWALqdHPGdmj0L0HkX5Hrb+1rM=\", true);\n\n_c = USMap;\nexport default USMap;\n\nvar _c;\n\n$RefreshReg$(_c, \"USMap\");","map":{"version":3,"sources":["/Users/Kevin/Desktop/program/cs 485/cdc dataset/src/components/USMap.js"],"names":["React","useRef","useEffect","select","USMap","data","property","svgRef","wrapperRef","dimensions","useResizeObserver","selectedCountry","setSelectedCountry","useState","svg","current","minProp","min","features","feature","properties","maxProp","max","colorScale","scaleLinear","domain","range","width","height","getBoundingClientRect","projection","geoMercator","fitSize","precision","pathGenerator","geoPath","selectAll","join","on","attr","transition","text","name","toLocaleString","marginBottom"],"mappings":"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","sourcesContent":["import React,{useRef,useEffect} from \"react\";\nimport {select} from \"d3\";\n\nfunction USMap({data,property}){\n   \n        const svgRef = useRef();\n        const wrapperRef = useRef();\n        const dimensions = useResizeObserver(wrapperRef);\n        const [selectedCountry, setSelectedCountry] = useState(null);\n      \n        // will be called initially and on every data change\n        useEffect(() => {\n          const svg = select(svgRef.current);\n      \n          const minProp = min(data.features, feature => feature.properties[property]);\n          const maxProp = max(data.features, feature => feature.properties[property]);\n          const colorScale = scaleLinear()\n            .domain([minProp, maxProp])\n            .range([\"#ccc\", \"red\"]);\n      \n          // use resized dimensions\n          // but fall back to getBoundingClientRect, if no dimensions yet.\n          const { width, height } =\n            dimensions || wrapperRef.current.getBoundingClientRect();\n      \n          // projects geo-coordinates on a 2D plane\n          const projection = geoMercator()\n            .fitSize([width, height], selectedCountry || data)\n            .precision(100);\n      \n          // takes geojson data,\n          // transforms that into the d attribute of a path element\n          const pathGenerator = geoPath().projection(projection);\n      \n          // render each country\n          svg\n            .selectAll(\".country\")\n            .data(data.features)\n            .join(\"path\")\n            .on(\"click\", feature => {\n              setSelectedCountry(selectedCountry === feature ? null : feature);\n            })\n            .attr(\"class\", \"country\")\n            .transition()\n            .attr(\"fill\", feature => colorScale(feature.properties[property]))\n            .attr(\"d\", feature => pathGenerator(feature));\n      \n          // render text\n          svg\n            .selectAll(\".label\")\n            .data([selectedCountry])\n            .join(\"text\")\n            .attr(\"class\", \"label\")\n            .text(\n              feature =>\n                feature &&\n                feature.properties.name +\n                  \": \" +\n                  feature.properties[property].toLocaleString()\n            )\n            .attr(\"x\", 10)\n            .attr(\"y\", 25);\n        }, [data, dimensions, property, selectedCountry]);\n      \n        return (\n          <div ref={wrapperRef} style={{ marginBottom: \"2rem\" }}>\n            <svg ref={svgRef}></svg>\n          </div>\n        );\n      \n    }\n      export default USMap;\n"]},"metadata":{},"sourceType":"module"}