{"ast":null,"code":"var _jsxFileName = \"/Users/Kevin/Desktop/program/cs 485/cdc dataset/src/components/USMap.js\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useEffect, useState } from \"react\";\nimport { select, geoPath, geoMercator, min, max, scaleLinear } from \"d3\"; // import useResizeObserver from \"./useResizeObserver\";\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction USMap(_ref) {\n  _s();\n\n  let {\n    data,\n    property\n  } = _ref;\n  const svgRef = useRef();\n  const wrapperRef = useRef(); // const dimensions = useResizeObserver(wrapperRef);\n\n  const [selectedCountry, setSelectedCountry] = useState(null); // will be called initially and on every data change\n\n  useEffect(() => {\n    const svg = select(svgRef.current); //   const minProp = min(data.features, feature => feature.properties[property]);\n    //   const maxProp = max(data.features, feature => feature.properties[property]);\n    //   const colorScale = scaleLinear()\n    //     .domain([minProp, maxProp])\n    //     .range([\"#ccc\", \"red\"]);\n    // use resized dimensions\n    // but fall back to getBoundingClientRect, if no dimensions yet.\n\n    const {\n      width,\n      height\n    } = wrapperRef.current.getBoundingClientRect(); // projects geo-coordinates on a 2D plane\n\n    const projection = geoMercator().fitSize([width, height], selectedCountry || data).precision(100); // takes geojson data,\n    // transforms that into the d attribute of a path element\n\n    const pathGenerator = geoPath().projection(projection); // render each country\n\n    svg.selectAll(\".country\").data(data.features).join(\"path\").on(\"click\", feature => {\n      setSelectedCountry(selectedCountry === feature ? null : feature);\n    }).attr(\"class\", \"country\").transition().attr(\"d\", feature => pathGenerator(feature)); // render text\n  }, [data, property, selectedCountry]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: wrapperRef,\n    style: {\n      marginBottom: \"2rem\"\n    },\n    children: /*#__PURE__*/_jsxDEV(\"svg\", {\n      ref: svgRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 11\n  }, this);\n}\n\n_s(USMap, \"nQWYpVQBKg9asOOnG0otUTfkvOk=\");\n\n_c = USMap;\nexport default USMap;\n\nvar _c;\n\n$RefreshReg$(_c, \"USMap\");","map":{"version":3,"sources":["/Users/Kevin/Desktop/program/cs 485/cdc dataset/src/components/USMap.js"],"names":["React","useRef","useEffect","useState","select","geoPath","geoMercator","min","max","scaleLinear","USMap","data","property","svgRef","wrapperRef","selectedCountry","setSelectedCountry","svg","current","width","height","getBoundingClientRect","projection","fitSize","precision","pathGenerator","selectAll","features","join","on","feature","attr","transition","marginBottom"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,MAAhB,EAAwBC,SAAxB,EAAmCC,QAAnC,QAAmD,OAAnD;AACA,SAASC,MAAT,EAAiBC,OAAjB,EAA0BC,WAA1B,EAAuCC,GAAvC,EAA4CC,GAA5C,EAAiDC,WAAjD,QAAoE,IAApE,C,CACA;;;;AAEA,SAASC,KAAT,OAA+B;AAAA;;AAAA,MAAhB;AAACC,IAAAA,IAAD;AAAMC,IAAAA;AAAN,GAAgB;AAEvB,QAAMC,MAAM,GAAGZ,MAAM,EAArB;AACA,QAAMa,UAAU,GAAGb,MAAM,EAAzB,CAHuB,CAIvB;;AACA,QAAM,CAACc,eAAD,EAAkBC,kBAAlB,IAAwCb,QAAQ,CAAC,IAAD,CAAtD,CALuB,CAOvB;;AACAD,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMe,GAAG,GAAGb,MAAM,CAACS,MAAM,CAACK,OAAR,CAAlB,CADc,CAGhB;AACA;AACA;AACA;AACA;AAEE;AACA;;AACA,UAAM;AAAEC,MAAAA,KAAF;AAASC,MAAAA;AAAT,QACHN,UAAU,CAACI,OAAX,CAAmBG,qBAAnB,EADH,CAXc,CAcd;;AACA,UAAMC,UAAU,GAAGhB,WAAW,GAC3BiB,OADgB,CACR,CAACJ,KAAD,EAAQC,MAAR,CADQ,EACSL,eAAe,IAAIJ,IAD5B,EAEhBa,SAFgB,CAEN,GAFM,CAAnB,CAfc,CAmBd;AACA;;AACA,UAAMC,aAAa,GAAGpB,OAAO,GAAGiB,UAAV,CAAqBA,UAArB,CAAtB,CArBc,CAuBd;;AACAL,IAAAA,GAAG,CACAS,SADH,CACa,UADb,EAEGf,IAFH,CAEQA,IAAI,CAACgB,QAFb,EAGGC,IAHH,CAGQ,MAHR,EAIGC,EAJH,CAIM,OAJN,EAIeC,OAAO,IAAI;AACtBd,MAAAA,kBAAkB,CAACD,eAAe,KAAKe,OAApB,GAA8B,IAA9B,GAAqCA,OAAtC,CAAlB;AACD,KANH,EAOGC,IAPH,CAOQ,OAPR,EAOiB,SAPjB,EAQGC,UARH,GASGD,IATH,CASQ,GATR,EASaD,OAAO,IAAIL,aAAa,CAACK,OAAD,CATrC,EAxBc,CAmCd;AAED,GArCQ,EAqCN,CAACnB,IAAD,EAAOC,QAAP,EAAiBG,eAAjB,CArCM,CAAT;AAuCA,sBACE;AAAK,IAAA,GAAG,EAAED,UAAV;AAAsB,IAAA,KAAK,EAAE;AAAEmB,MAAAA,YAAY,EAAE;AAAhB,KAA7B;AAAA,2BACE;AAAK,MAAA,GAAG,EAAEpB;AAAV;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAMH;;GArDIH,K;;KAAAA,K;AAsDH,eAAeA,KAAf","sourcesContent":["import React, { useRef, useEffect, useState } from \"react\";\nimport { select, geoPath, geoMercator, min, max, scaleLinear } from \"d3\";\n// import useResizeObserver from \"./useResizeObserver\";\n\nfunction USMap({data,property}){\n   \n        const svgRef = useRef();\n        const wrapperRef = useRef();\n        // const dimensions = useResizeObserver(wrapperRef);\n        const [selectedCountry, setSelectedCountry] = useState(null);\n      \n        // will be called initially and on every data change\n        useEffect(() => {\n          const svg = select(svgRef.current);\n      \n        //   const minProp = min(data.features, feature => feature.properties[property]);\n        //   const maxProp = max(data.features, feature => feature.properties[property]);\n        //   const colorScale = scaleLinear()\n        //     .domain([minProp, maxProp])\n        //     .range([\"#ccc\", \"red\"]);\n      \n          // use resized dimensions\n          // but fall back to getBoundingClientRect, if no dimensions yet.\n          const { width, height } =\n             wrapperRef.current.getBoundingClientRect();\n      \n          // projects geo-coordinates on a 2D plane\n          const projection = geoMercator()\n            .fitSize([width, height], selectedCountry || data)\n            .precision(100);\n      \n          // takes geojson data,\n          // transforms that into the d attribute of a path element\n          const pathGenerator = geoPath().projection(projection);\n      \n          // render each country\n          svg\n            .selectAll(\".country\")\n            .data(data.features)\n            .join(\"path\")\n            .on(\"click\", feature => {\n              setSelectedCountry(selectedCountry === feature ? null : feature);\n            })\n            .attr(\"class\", \"country\")\n            .transition()\n            .attr(\"d\", feature => pathGenerator(feature));\n      \n          // render text\n         \n        }, [data, property, selectedCountry]);\n      \n        return (\n          <div ref={wrapperRef} style={{ marginBottom: \"2rem\" }}>\n            <svg ref={svgRef}></svg>\n          </div>\n        );\n      \n    }\n      export default USMap;\n"]},"metadata":{},"sourceType":"module"}